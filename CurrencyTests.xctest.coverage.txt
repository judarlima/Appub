/Users/raduj/Developer/Currency/CurrencyTests/Gateway/ExchangeGatewayTests.swift:
    1|       |//
    2|       |//  ExchangeGatewayTests.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Currency
   11|       |
   12|       |class ExchangeGatewayTests: XCTestCase {
   13|       |    var sut: ExchangeGateway!
   14|       |    var service: ServiceMock!
   15|       |    
   16|      0|    override func setUp() {
   17|      0|        service = ServiceMock()
   18|      0|        sut = ExchangeGateway(service: service)
   19|      0|    }
   20|       |
   21|      0|    func testGetExchangeCurrenciesSuccessWhenServiceReturnValidData() {
   22|      0|        let gatewayExpectation = expectation(description: #function)
   23|      0|        let expectedResult = DataHandler.exchangeCurrencies()
   24|      0|        var gatewayResult: Exchange?
   25|      0|        
   26|      0|        sut.getExchangeCurrencies { (result) in
   27|      0|            if case let .success(exchange) = result {
   28|      0|                gatewayResult = exchange
   29|      0|            }
   30|      0|            gatewayExpectation.fulfill()
   31|      0|        }
   32|      0|        
   33|      0|        waitForExpectations(timeout: 0.5) { _ in
   34|      0|            XCTAssertEqual(expectedResult, gatewayResult)
   35|      0|        }
   36|      0|        
   37|      0|    }
   38|       |    
   39|      0|    func testGetExchangeCurrenciesFailureWhenServiceReturnInvalidData() {
   40|      0|        let expectedResult = ServiceError.brokenData
   41|      0|        let gatewayExpectation = expectation(description: #function)
   42|      0|        var gatewayResult: ServiceError?
   43|      0|        service.isBrokenData = true
   44|      0|        
   45|      0|        sut.getExchangeCurrencies { (result) in
   46|      0|            if case let .failure(error) = result {
   47|      0|                gatewayResult = error
   48|      0|            }
   49|      0|            gatewayExpectation.fulfill()
   50|      0|        }
   51|      0|        
   52|      0|        waitForExpectations(timeout: 0.5) { (_) in
   53|      0|            XCTAssertEqual(expectedResult, gatewayResult)
   54|      0|        }
   55|      0|    }
   56|       |    
   57|      0|    func testGetLatestRatesSuccessWhenServiceReturnValidData() {
   58|      0|        let expectedResult = DataHandler.rates()
   59|      0|        let gatewayExpectation = expectation(description: #function)
   60|      0|        var gatewayResult: Rates?
   61|      0|        
   62|      0|        sut.getLatestRates { (result) in
   63|      0|            if case let .success(rates) = result {
   64|      0|                gatewayResult = rates
   65|      0|            }
   66|      0|            gatewayExpectation.fulfill()
   67|      0|        }
   68|      0|        
   69|      0|        waitForExpectations(timeout: 0.5) { (_) in
   70|      0|            XCTAssertEqual(expectedResult, gatewayResult)
   71|      0|        }
   72|      0|    }
   73|       |    
   74|      0|    func testGetLatestRatesFailureWhenServiceReturnValidData() {
   75|      0|        let expectedResult = ServiceError.brokenData
   76|      0|        let gatewayExpectation = expectation(description: #function)
   77|      0|        var gatewayResult: ServiceError?
   78|      0|        service.isBrokenData = true
   79|      0|        
   80|      0|        sut.getLatestRates { (result) in
   81|      0|            if case let .failure(error) = result {
   82|      0|                gatewayResult = error
   83|      0|            }
   84|      0|            gatewayExpectation.fulfill()
   85|      0|        }
   86|      0|        
   87|      0|        waitForExpectations(timeout: 0.5) { (_) in
   88|      0|            XCTAssertEqual(expectedResult, gatewayResult)
   89|      0|        }
   90|      0|    }
   91|       |
   92|       |}

/Users/raduj/Developer/Currency/CurrencyTests/Helpers/DataHandler.swift:
    1|       |//
    2|       |//  JSONHandler.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |@testable import Currency
   11|       |
   12|       |final class DataHandler {
   13|       |    private static let filename = "exchange_response"
   14|       |    private static let testBundle = Bundle(for: DataHandler.self)
   15|       |    var isInvalidJSON = false
   16|       |    
   17|      0|    static func loadData(completion: @escaping(Result<Data>) -> Void) {
   18|      0|        guard let url = testBundle.url(forResource: filename, withExtension: "json") else { return }
   19|      0|        do {
   20|      0|            let data = try Data.init(contentsOf: url)
   21|      0|            completion(Result.success(data))
   22|      0|        } catch {
   23|      0|            completion(Result.failure(.brokenData))
   24|      0|        }
   25|      0|    }
   26|       |    
   27|      0|    static func exchangeCurrencies() -> Exchange {
   28|      0|        guard let url = testBundle.url(forResource: filename, withExtension: "json")
   29|      0|            else { fatalError("Could not find file.") }
   30|      0|        do {
   31|      0|            let data = try Data.init(contentsOf: url)
   32|      0|            let jsonDecoder = JSONDecoder()
   33|      0|            let responseModel = try jsonDecoder.decode(ExchangeResponseModel.self, from: data)
   34|      0|            let exchange = Exchange(responseModel: responseModel)
   35|      0|            return exchange
   36|      0|        } catch {
   37|      0|            fatalError(ServiceError.couldNotParseObject.localizedDescription)
   38|      0|        }
   39|      0|    }
   40|       |    
   41|      0|    static func rates() -> Rates {
   42|      0|        guard let url = testBundle.url(forResource: filename, withExtension: "json")
   43|      0|            else { fatalError("Could not find file.") }
   44|      0|        do {
   45|      0|            let data = try Data.init(contentsOf: url)
   46|      0|            let jsonDecoder = JSONDecoder()
   47|      0|            let responseModel = try jsonDecoder.decode(ExchangeResponseModel.self, from: data)
   48|      0|            let rates = Rates(responseModel: responseModel)
   49|      0|            return rates
   50|      0|        } catch {
   51|      0|            fatalError(ServiceError.couldNotParseObject.localizedDescription)
   52|      0|        }
   53|      0|    }
   54|       |    
   55|       |}

/Users/raduj/Developer/Currency/CurrencyTests/Interactor/CurrencyListInteractorTests.swift:
    1|       |//
    2|       |//  CurrencyListInteractorTests.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Currency
   11|       |
   12|       |class CurrencyListInteractorTests: XCTestCase {
   13|       |    var sut: CurrencyListInteractor!
   14|       |    var gateway: ExchangeGatewayMock!
   15|       |    var presenter: CurrencyListPresenterMock!
   16|       |    
   17|      0|    override func setUp() {
   18|      0|        gateway = ExchangeGatewayMock()
   19|      0|        presenter = CurrencyListPresenterMock()
   20|      0|        sut = CurrencyListInteractor(gateway: gateway,
   21|      0|                                     presenter: presenter)
   22|      0|    }
   23|       |    
   24|      0|    func testListCurrenciesWhenGatewayReturnsExchangeThenPresenterShowList() {
   25|      0|        let expectedExchange = ExchangeViewModel(exchange: DataHandler.exchangeCurrencies())
   26|      0|        
   27|      0|        sut.listCurrencies()
   28|      0|        
   29|      0|        XCTAssertTrue(presenter.showListWasPresented)
   30|      0|        XCTAssertFalse(presenter.showErrorWasPresented)
   31|      0|        XCTAssertFalse(presenter.updateRatesWasPresented)
   32|      0|        XCTAssertNil(presenter.presentedError)
   33|      0|        XCTAssertEqual(expectedExchange, presenter.presentedExchange)
   34|      0|    }
   35|       |    
   36|      0|    func testListCurrenciesWhenGatewayReturnsErrorThenPresenterShowError() {
   37|      0|        let expectedError = ServiceError.couldNotFindHost.localizedDescription
   38|      0|        gateway.isFailureResult = true
   39|      0|        
   40|      0|        sut.listCurrencies()
   41|      0|        
   42|      0|        XCTAssertTrue(presenter.showErrorWasPresented)
   43|      0|        XCTAssertFalse(presenter.showListWasPresented)
   44|      0|        XCTAssertFalse(presenter.updateRatesWasPresented)
   45|      0|        XCTAssertEqual(expectedError, presenter.presentedError)
   46|      0|        XCTAssertNil(presenter.presentedExchange)
   47|      0|    }
   48|       |    
   49|      0|    func testUpdateRatesWithValidCurrencyAndAmountThenPresenterShowUpdatedRates() {
   50|      0|        let ratesList = ExchangeViewModel(exchange: DataHandler.exchangeCurrencies()).rates
   51|      0|        
   52|      0|        sut.listCurrencies()
   53|      0|        sut.updateRates(of: ratesList, currency: "BRL", amount: "0")
   54|      0|        
   55|      0|        XCTAssertTrue(presenter.updateRatesWasPresented)
   56|      0|        XCTAssertTrue(presenter.showListWasPresented)
   57|      0|        XCTAssertFalse(presenter.showErrorWasPresented)
   58|      0|        XCTAssertNil(presenter.presentedError)        
   59|      0|        for currency in presenter.presentedExchange!.rates {
   60|      0|            XCTAssertEqual(currency.amount, "0.00")
   61|      0|        }
   62|      0|    }
   63|       |    
   64|      0|    func testUpdateRatesWhenGatewayFailsThenPresenterShowError() {
   65|      0|        let ratesList = ExchangeViewModel(exchange: DataHandler.exchangeCurrencies()).rates
   66|      0|        let expectedResult = ServiceError.couldNotParseObject.localizedDescription
   67|      0|        gateway.isFailureResult = true
   68|      0|        
   69|      0|        sut.listCurrencies()
   70|      0|        sut.updateRates(of: ratesList, currency: "BRL", amount: "")
   71|      0|        
   72|      0|        XCTAssertFalse(presenter.updateRatesWasPresented)
   73|      0|        XCTAssertFalse(presenter.showListWasPresented)
   74|      0|        XCTAssertTrue(presenter.showErrorWasPresented)
   75|      0|        XCTAssertNil(presenter.presentedExchange)
   76|      0|        XCTAssertEqual(expectedResult, presenter.presentedError)
   77|      0|    }
   78|       |    
   79|      0|    func testUpdateRatesWhenBsaeCurrencyDoesNotExistThenPresenterShowError() {
   80|      0|        let ratesList = ExchangeViewModel(exchange: DataHandler.exchangeCurrencies()).rates
   81|      0|        let expectedResult = ServiceError.unknown("Could not found the base currency.").localizedDescription
   82|      0|        
   83|      0|        sut.updateRates(of: ratesList, currency: "BRL", amount: "")
   84|      0|        
   85|      0|        XCTAssertFalse(presenter.updateRatesWasPresented)
   86|      0|        XCTAssertFalse(presenter.showListWasPresented)
   87|      0|        XCTAssertTrue(presenter.showErrorWasPresented)
   88|      0|        XCTAssertNil(presenter.presentedExchange)
   89|      0|        XCTAssertEqual(expectedResult, presenter.presentedError)
   90|      0|    }
   91|       |
   92|       |}

/Users/raduj/Developer/Currency/CurrencyTests/Mocks/CurrencyListPresenterMock.swift:
    1|       |//
    2|       |//  CurrencyListPresenterMock.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |@testable import Currency
   11|       |
   12|       |final class CurrencyListPresenterMock: CurrencyListPresenter {
   13|       |    var showErrorWasPresented = false
   14|       |    var showListWasPresented = false
   15|       |    var updateRatesWasPresented = false
   16|       |    var presentedExchange: ExchangeViewModel?
   17|       |    var presentedError: String?
   18|       |    
   19|      0|    func showError(_ error: String) {
   20|      0|        showErrorWasPresented = true
   21|      0|        presentedError = error
   22|      0|    }
   23|       |    
   24|      0|    func showList(with exchange: ExchangeViewModel) {
   25|      0|        showListWasPresented = true
   26|      0|        presentedExchange = exchange
   27|      0|    }
   28|       |    
   29|      0|    func updateRates(viewModel: ExchangeViewModel) {
   30|      0|        updateRatesWasPresented = true
   31|      0|        presentedExchange = viewModel
   32|      0|    }
   33|       |}

/Users/raduj/Developer/Currency/CurrencyTests/Mocks/ExchangeGatewayMock.swift:
    1|       |//
    2|       |//  ExchangeGatewayMock.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |@testable import Currency
   11|       |
   12|       |final class ExchangeGatewayMock: ExchangeGatewayProtocol {
   13|       |    var isFailureResult = false
   14|       |    
   15|      0|    func getLatestRates(completion: @escaping (Result<Rates>) -> Void) {
   16|      0|        if isFailureResult {
   17|      0|            completion(.failure(.couldNotParseObject))
   18|      0|        } else {
   19|      0|            completion(.success(DataHandler.rates()))
   20|      0|        }
   21|      0|    }
   22|       |    
   23|      0|    func getExchangeCurrencies(completion: @escaping (Result<Exchange>) -> Void) {
   24|      0|        if isFailureResult {
   25|      0|            completion(.failure(.couldNotFindHost))
   26|      0|        } else {
   27|      0|            completion(.success(DataHandler.exchangeCurrencies()))
   28|      0|        }
   29|      0|    }
   30|       |}

/Users/raduj/Developer/Currency/CurrencyTests/Mocks/ServiceMock.swift:
    1|       |//
    2|       |//  ServiceMock.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |@testable import Currency
   11|       |
   12|       |final class ServiceMock: ServiceProtocol {
   13|       |    var isBrokenData = false
   14|       |    
   15|      0|    func requestData(with setup: ServiceSetup, completion: @escaping (Result<Data>) -> Void) {
   16|      0|        if isBrokenData {
   17|      0|            completion(Result.failure(.brokenData))
   18|      0|        } else {
   19|      0|            DataHandler.loadData { (result) in
   20|      0|                completion(result)
   21|      0|            }
   22|      0|        }
   23|      0|    }
   24|       |}

/Users/raduj/Developer/Currency/CurrencyTests/ViewModels/CurrencyViewModelTests.swift:
    1|       |//
    2|       |//  CurrencyViewModelTests.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Currency
   11|       |
   12|       |class CurrencyViewModelTests: XCTestCase {
   13|       |    var sut: CurrencyViewModel!
   14|      0|    private var currency: Currency {
   15|      0|        return Currency(symbol: "BRL",
   16|      0|                        rate: 15.9812)
   17|      0|    }
   18|       |    
   19|      0|    func testViewModelWhenInitilizedWithCurrencyBusinessModel() {
   20|      0|        sut = CurrencyViewModel(currency: currency)
   21|      0|        
   22|      0|        XCTAssertEqual(currency.symbol, sut.symbol)
   23|      0|        XCTAssertEqual(currency.name, sut.name)
   24|      0|        XCTAssertEqual(currency.countryImage, sut.image)
   25|      0|        XCTAssertEqual(String(format: "%.2f", currency.amount), sut.amount)
   26|      0|    }
   27|       |    
   28|      0|    func testViewModelWhenInitilizedWithEachProperty() {
   29|      0|        let expectedSymbol = "AUD"
   30|      0|        let expectedImage = UIImage(named: expectedSymbol)!
   31|      0|        let expectedName = NSLocalizedString(expectedSymbol, comment: "")
   32|      0|        let expectedAmount = 23.987
   33|      0|        
   34|      0|        sut = CurrencyViewModel(image: expectedImage,
   35|      0|                                name: expectedName,
   36|      0|                                amount: expectedAmount,
   37|      0|                                symbol: expectedSymbol)
   38|      0|        
   39|      0|        XCTAssertEqual(expectedSymbol, sut.symbol)
   40|      0|        XCTAssertEqual(expectedName, sut.name)
   41|      0|        XCTAssertEqual(expectedImage, sut.image)
   42|      0|        XCTAssertEqual(String(format: "%.2f", expectedAmount), sut.amount)
   43|      0|    }
   44|       |
   45|       |}

/Users/raduj/Developer/Currency/CurrencyTests/ViewModels/ExchangeViewModelTests.swift:
    1|       |//
    2|       |//  ExchangeViewModelTests.swift
    3|       |//  CurrencyTests
    4|       |//
    5|       |//  Created by Judar Lima on 24/01/19.
    6|       |//  Copyright © 2019 Judar Lima. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Currency
   11|       |
   12|       |class ExchangeViewModelTests: XCTestCase {
   13|       |    var sut: ExchangeViewModel!
   14|      0|    private var exchange: Exchange {
   15|      0|        return DataHandler.exchangeCurrencies()
   16|      0|    }
   17|       |    
   18|      0|    func testViewModelWhenInitilizedWithExchangeBusinessModel() {
   19|      0|        sut = ExchangeViewModel(exchange: exchange)
   20|      0|        let expectedRates = exchange.currencies.map({ CurrencyViewModel(currency: $0) })
   21|      0|        
   22|      0|        XCTAssertEqual(exchange.base.name, sut.base.name)
   23|      0|        XCTAssertEqual(exchange.base.symbol, sut.base.symbol)
   24|      0|        XCTAssertEqual(exchange.base.countryImage, sut.base.image)
   25|      0|        XCTAssertEqual(String(format: "%.2f", exchange.base.amount), sut.base.amount)
   26|      0|        XCTAssertEqual(expectedRates, sut.rates)
   27|      0|        
   28|      0|    }
   29|       |    
   30|      0|    func testViewModelWhenInitializedWithBaseCurrencyAndRates() {
   31|      0|        let expectedBase = CurrencyViewModel(image: UIImage(named: "BRL")!,
   32|      0|                                     name: NSLocalizedString("BRL", comment: ""),
   33|      0|                                     amount: 25.432,
   34|      0|                                     symbol: "BRL")
   35|      0|        
   36|      0|        let expectedRates = [CurrencyViewModel(image: UIImage(named: "USD")!,
   37|      0|                                      name: NSLocalizedString("USD", comment: ""),
   38|      0|                                      amount: 35.9323,
   39|      0|                                      symbol: "USD")]
   40|      0|
   41|      0|        sut = ExchangeViewModel(base: expectedBase, rates: expectedRates)
   42|      0|        
   43|      0|        XCTAssertEqual(sut.base, expectedBase)
   44|      0|        XCTAssertEqual(sut.rates, expectedRates)
   45|      0|    }
   46|       |}

