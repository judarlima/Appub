/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationAudioEqualizer.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationAudioEqualizer.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationAudioEqualizer: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let lineSize = size.width / 9
   34|      0|        let x = (layer.bounds.size.width - lineSize * 7) / 2
   35|      0|        let y = (layer.bounds.size.height - size.height) / 2
   36|      0|        let duration: [CFTimeInterval] = [4.3, 2.5, 1.7, 3.1]
   37|      0|        let values = [0, 0.7, 0.4, 0.05, 0.95, 0.3, 0.9, 0.4, 0.15, 0.18, 0.75, 0.01]
   38|      0|
   39|      0|        // Draw lines
   40|      0|        for i in 0 ..< 4 {
   41|      0|            let animation = CAKeyframeAnimation()
   42|      0|
   43|      0|            animation.keyPath = "path"
   44|      0|            animation.isAdditive = true
   45|      0|            animation.values = []
   46|      0|
   47|      0|            for j in 0 ..< values.count {
   48|      0|                let heightFactor = values[j]
   49|      0|                let height = size.height * CGFloat(heightFactor)
   50|      0|                let point = CGPoint(x: 0, y: size.height - height)
   51|      0|                let path = UIBezierPath(rect: CGRect(origin: point, size: CGSize(width: lineSize, height: height)))
   52|      0|
   53|      0|                animation.values?.append(path.cgPath)
   54|      0|            }
   55|      0|            animation.duration = duration[i]
   56|      0|            animation.repeatCount = HUGE
   57|      0|            animation.isRemovedOnCompletion = false
   58|      0|
   59|      0|            let line = NVActivityIndicatorShape.line.layerWith(size: CGSize(width: lineSize, height: size.height), color: color)
   60|      0|            let frame = CGRect(x: x + lineSize * 2 * CGFloat(i),
   61|      0|                               y: y,
   62|      0|                               width: lineSize,
   63|      0|                               height: size.height)
   64|      0|
   65|      0|            line.frame = frame
   66|      0|            line.add(animation, forKey: "animation")
   67|      0|            layer.addSublayer(line)
   68|      0|        }
   69|      0|    }
   70|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallBeat.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallBeat.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallBeat: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSpacing: CGFloat = 2
   34|      0|        let circleSize = (size.width - circleSpacing * 2) / 3
   35|      0|        let x = (layer.bounds.size.width - size.width) / 2
   36|      0|        let y = (layer.bounds.size.height - circleSize) / 2
   37|      0|        let duration: CFTimeInterval = 0.7
   38|      0|        let beginTime = CACurrentMediaTime()
   39|      0|        let beginTimes = [0.35, 0, 0.35]
   40|      0|
   41|      0|        // Scale animation
   42|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   43|      0|
   44|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   45|      0|        scaleAnimation.values = [1, 0.75, 1]
   46|      0|        scaleAnimation.duration = duration
   47|      0|
   48|      0|        // Opacity animation
   49|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   50|      0|
   51|      0|        opacityAnimation.keyTimes = [0, 0.5, 1]
   52|      0|        opacityAnimation.values = [1, 0.2, 1]
   53|      0|        opacityAnimation.duration = duration
   54|      0|
   55|      0|        // Aniamtion
   56|      0|        let animation = CAAnimationGroup()
   57|      0|
   58|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   59|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   60|      0|        animation.duration = duration
   61|      0|        animation.repeatCount = HUGE
   62|      0|        animation.isRemovedOnCompletion = false
   63|      0|
   64|      0|        // Draw circles
   65|      0|        for i in 0 ..< 3 {
   66|      0|            let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   67|      0|            let frame = CGRect(x: x + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   68|      0|                               y: y,
   69|      0|                               width: circleSize,
   70|      0|                               height: circleSize)
   71|      0|
   72|      0|            animation.beginTime = beginTime + beginTimes[i]
   73|      0|            circle.frame = frame
   74|      0|            circle.add(animation, forKey: "animation")
   75|      0|            layer.addSublayer(circle)
   76|      0|        }
   77|      0|    }
   78|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallClipRotate.swift:
    1|       |//
    2|       |//  NVActivityIndicatorBallClipRotate.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallClipRotate: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 0.75
   34|      0|
   35|      0|        //    Scale animation
   36|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   37|      0|
   38|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   39|      0|        scaleAnimation.values = [1, 0.6, 1]
   40|      0|
   41|      0|        // Rotate animation
   42|      0|        let rotateAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
   43|      0|
   44|      0|        rotateAnimation.keyTimes = scaleAnimation.keyTimes
   45|      0|        rotateAnimation.values = [0, Double.pi, 2 * Double.pi]
   46|      0|
   47|      0|        // Animation
   48|      0|        let animation = CAAnimationGroup()
   49|      0|
   50|      0|        animation.animations = [scaleAnimation, rotateAnimation]
   51|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   52|      0|        animation.duration = duration
   53|      0|        animation.repeatCount = HUGE
   54|      0|        animation.isRemovedOnCompletion = false
   55|      0|
   56|      0|        // Draw circle
   57|      0|        let circle = NVActivityIndicatorShape.ringThirdFour.layerWith(size: CGSize(width: size.width, height: size.height), color: color)
   58|      0|        let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   59|      0|                           y: (layer.bounds.size.height - size.height) / 2,
   60|      0|                           width: size.width,
   61|      0|                           height: size.height)
   62|      0|
   63|      0|        circle.frame = frame
   64|      0|        circle.add(animation, forKey: "animation")
   65|      0|        layer.addSublayer(circle)
   66|      0|    }
   67|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallClipRotateMultiple.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallClipRotateMultiple.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallClipRotateMultiple: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let bigCircleSize: CGFloat = size.width
   34|      0|        let smallCircleSize: CGFloat = size.width / 2
   35|      0|        let longDuration: CFTimeInterval = 1
   36|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
   37|      0|
   38|      0|        circleOf(shape: .ringTwoHalfHorizontal,
   39|      0|                 duration: longDuration,
   40|      0|                 timingFunction: timingFunction,
   41|      0|                 layer: layer,
   42|      0|                 size: bigCircleSize,
   43|      0|                 color: color, reverse: false)
   44|      0|        circleOf(shape: .ringTwoHalfVertical,
   45|      0|                 duration: longDuration,
   46|      0|                 timingFunction: timingFunction,
   47|      0|                 layer: layer,
   48|      0|                 size: smallCircleSize,
   49|      0|                 color: color, reverse: true)
   50|      0|    }
   51|       |
   52|      0|    func createAnimationIn(duration: CFTimeInterval, timingFunction: CAMediaTimingFunction, reverse: Bool) -> CAAnimation {
   53|      0|        // Scale animation
   54|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   55|      0|
   56|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   57|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction]
   58|      0|        scaleAnimation.values = [1, 0.6, 1]
   59|      0|        scaleAnimation.duration = duration
   60|      0|
   61|      0|        // Rotate animation
   62|      0|        let rotateAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
   63|      0|
   64|      0|        rotateAnimation.keyTimes = scaleAnimation.keyTimes
   65|      0|        rotateAnimation.timingFunctions = [timingFunction, timingFunction]
   66|      0|        if !reverse {
   67|      0|            rotateAnimation.values = [0, Double.pi, 2 * Double.pi]
   68|      0|        } else {
   69|      0|            rotateAnimation.values = [0, -Double.pi, -2 * Double.pi]
   70|      0|        }
   71|      0|        rotateAnimation.duration = duration
   72|      0|
   73|      0|        // Animation
   74|      0|        let animation = CAAnimationGroup()
   75|      0|
   76|      0|        animation.animations = [scaleAnimation, rotateAnimation]
   77|      0|        animation.duration = duration
   78|      0|        animation.repeatCount = HUGE
   79|      0|        animation.isRemovedOnCompletion = false
   80|      0|
   81|      0|        return animation
   82|      0|    }
   83|       |
   84|       |    // swiftlint:disable:next function_parameter_count
   85|      0|    func circleOf(shape: NVActivityIndicatorShape, duration: CFTimeInterval, timingFunction: CAMediaTimingFunction, layer: CALayer, size: CGFloat, color: UIColor, reverse: Bool) {
   86|      0|        let circle = shape.layerWith(size: CGSize(width: size, height: size), color: color)
   87|      0|        let frame = CGRect(x: (layer.bounds.size.width - size) / 2,
   88|      0|                           y: (layer.bounds.size.height - size) / 2,
   89|      0|                           width: size,
   90|      0|                           height: size)
   91|      0|        let animation = createAnimationIn(duration: duration, timingFunction: timingFunction, reverse: reverse)
   92|      0|
   93|      0|        circle.frame = frame
   94|      0|        circle.add(animation, forKey: "animation")
   95|      0|        layer.addSublayer(circle)
   96|      0|    }
   97|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallClipRotatePulse.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallClipRotatePulse.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallClipRotatePulse: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 1
   34|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.09, 0.57, 0.49, 0.9)
   35|      0|
   36|      0|        smallCircleWith(duration: duration, timingFunction: timingFunction, layer: layer, size: size, color: color)
   37|      0|        bigCircleWith(duration: duration, timingFunction: timingFunction, layer: layer, size: size, color: color)
   38|      0|    }
   39|       |
   40|      0|    func smallCircleWith(duration: CFTimeInterval, timingFunction: CAMediaTimingFunction, layer: CALayer, size: CGSize, color: UIColor) {
   41|      0|        // Animation
   42|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.scale")
   43|      0|
   44|      0|        animation.keyTimes = [0, 0.3, 1]
   45|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   46|      0|        animation.values = [1, 0.3, 1]
   47|      0|        animation.duration = duration
   48|      0|        animation.repeatCount = HUGE
   49|      0|        animation.isRemovedOnCompletion = false
   50|      0|
   51|      0|        // Draw circle
   52|      0|        let circleSize = size.width / 2
   53|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   54|      0|        let frame = CGRect(x: (layer.bounds.size.width - circleSize) / 2,
   55|      0|                           y: (layer.bounds.size.height - circleSize) / 2,
   56|      0|                           width: circleSize,
   57|      0|                           height: circleSize)
   58|      0|
   59|      0|        circle.frame = frame
   60|      0|        circle.add(animation, forKey: "animation")
   61|      0|        layer.addSublayer(circle)
   62|      0|    }
   63|       |
   64|      0|    func bigCircleWith(duration: CFTimeInterval, timingFunction: CAMediaTimingFunction, layer: CALayer, size: CGSize, color: UIColor) {
   65|      0|        // Scale animation
   66|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   67|      0|
   68|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   69|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction]
   70|      0|        scaleAnimation.values = [1, 0.6, 1]
   71|      0|        scaleAnimation.duration = duration
   72|      0|
   73|      0|        // Rotate animation
   74|      0|        let rotateAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
   75|      0|
   76|      0|        rotateAnimation.keyTimes = scaleAnimation.keyTimes
   77|      0|        rotateAnimation.timingFunctions = [timingFunction, timingFunction]
   78|      0|        rotateAnimation.values = [0, Double.pi, 2 * Double.pi]
   79|      0|        rotateAnimation.duration = duration
   80|      0|
   81|      0|        // Animation
   82|      0|        let animation = CAAnimationGroup()
   83|      0|
   84|      0|        animation.animations = [scaleAnimation, rotateAnimation]
   85|      0|        animation.duration = duration
   86|      0|        animation.repeatCount = HUGE
   87|      0|        animation.isRemovedOnCompletion = false
   88|      0|
   89|      0|        // Draw circle
   90|      0|        let circle = NVActivityIndicatorShape.ringTwoHalfVertical.layerWith(size: size, color: color)
   91|      0|        let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   92|      0|                           y: (layer.bounds.size.height - size.height) / 2,
   93|      0|                           width: size.width,
   94|      0|                           height: size.height)
   95|      0|        circle.frame = frame
   96|      0|        circle.add(animation, forKey: "animation")
   97|      0|        layer.addSublayer(circle)
   98|      0|    }
   99|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallGridBeat.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallGridBeat.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallGridBeat: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSpacing: CGFloat = 2
   34|      0|        let circleSize = (size.width - circleSpacing * 2) / 3
   35|      0|        let x = (layer.bounds.size.width - size.width) / 2
   36|      0|        let y = (layer.bounds.size.height - size.height) / 2
   37|      0|        let durations = [0.96, 0.93, 1.19, 1.13, 1.34, 0.94, 1.2, 0.82, 1.19]
   38|      0|        let beginTime = CACurrentMediaTime()
   39|      0|        let beginTimes = [0.36, 0.4, 0.68, 0.41, 0.71, -0.15, -0.12, 0.01, 0.32]
   40|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
   41|      0|
   42|      0|        // Animation
   43|      0|        let animation = CAKeyframeAnimation(keyPath: "opacity")
   44|      0|
   45|      0|        animation.keyTimes = [0, 0.5, 1]
   46|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   47|      0|        animation.values = [1, 0.7, 1]
   48|      0|        animation.repeatCount = HUGE
   49|      0|        animation.isRemovedOnCompletion = false
   50|      0|
   51|      0|        // Draw circles
   52|      0|        for i in 0 ..< 3 {
   53|      0|            for j in 0 ..< 3 {
   54|      0|                let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   55|      0|                let frame = CGRect(x: x + circleSize * CGFloat(j) + circleSpacing * CGFloat(j),
   56|      0|                                   y: y + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   57|      0|                                   width: circleSize,
   58|      0|                                   height: circleSize)
   59|      0|
   60|      0|                animation.duration = durations[3 * i + j]
   61|      0|                animation.beginTime = beginTime + beginTimes[3 * i + j]
   62|      0|                circle.frame = frame
   63|      0|                circle.add(animation, forKey: "animation")
   64|      0|                layer.addSublayer(circle)
   65|      0|            }
   66|      0|        }
   67|      0|    }
   68|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallGridPulse.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallGridPulse.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallGridPulse: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSpacing: CGFloat = 2
   34|      0|        let circleSize = (size.width - circleSpacing * 2) / 3
   35|      0|        let x = (layer.bounds.size.width - size.width) / 2
   36|      0|        let y = (layer.bounds.size.height - size.height) / 2
   37|      0|        let durations: [CFTimeInterval] = [0.72, 1.02, 1.28, 1.42, 1.45, 1.18, 0.87, 1.45, 1.06]
   38|      0|        let beginTime = CACurrentMediaTime()
   39|      0|        let beginTimes: [CFTimeInterval] = [ -0.06, 0.25, -0.17, 0.48, 0.31, 0.03, 0.46, 0.78, 0.45]
   40|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
   41|      0|
   42|      0|        // Scale animation
   43|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   44|      0|
   45|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   46|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction]
   47|      0|        scaleAnimation.values = [1, 0.5, 1]
   48|      0|
   49|      0|        // Opacity animation
   50|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   51|      0|
   52|      0|        opacityAnimation.keyTimes = [0, 0.5, 1]
   53|      0|        opacityAnimation.timingFunctions = [timingFunction, timingFunction]
   54|      0|        opacityAnimation.values = [1, 0.7, 1]
   55|      0|
   56|      0|        // Animation
   57|      0|        let animation = CAAnimationGroup()
   58|      0|
   59|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   60|      0|        animation.repeatCount = HUGE
   61|      0|        animation.isRemovedOnCompletion = false
   62|      0|
   63|      0|        // Draw circles
   64|      0|        for i in 0 ..< 3 {
   65|      0|            for j in 0 ..< 3 {
   66|      0|                let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   67|      0|                let frame = CGRect(x: x + circleSize * CGFloat(j) + circleSpacing * CGFloat(j),
   68|      0|                                   y: y + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   69|      0|                                   width: circleSize,
   70|      0|                                   height: circleSize)
   71|      0|
   72|      0|                animation.duration = durations[3 * i + j]
   73|      0|                animation.beginTime = beginTime + beginTimes[3 * i + j]
   74|      0|                circle.frame = frame
   75|      0|                circle.add(animation, forKey: "animation")
   76|      0|                layer.addSublayer(circle)
   77|      0|            }
   78|      0|        }
   79|      0|    }
   80|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallPulse.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallPulse.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallPulse: NVActivityIndicatorAnimationDelegate {
   31|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   32|      0|        let circleSpacing: CGFloat = 2
   33|      0|        let circleSize: CGFloat = (size.width - 2 * circleSpacing) / 3
   34|      0|        let x: CGFloat = (layer.bounds.size.width - size.width) / 2
   35|      0|        let y: CGFloat = (layer.bounds.size.height - circleSize) / 2
   36|      0|        let duration: CFTimeInterval = 0.75
   37|      0|        let beginTime = CACurrentMediaTime()
   38|      0|        let beginTimes: [CFTimeInterval] = [0.12, 0.24, 0.36]
   39|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.2, 0.68, 0.18, 1.08)
   40|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.scale")
   41|      0|
   42|      0|        // Animation
   43|      0|        animation.keyTimes = [0, 0.3, 1]
   44|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   45|      0|        animation.values = [1, 0.3, 1]
   46|      0|        animation.duration = duration
   47|      0|        animation.repeatCount = HUGE
   48|      0|        animation.isRemovedOnCompletion = false
   49|      0|
   50|      0|        // Draw circles
   51|      0|        for i in 0 ..< 3 {
   52|      0|            let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   53|      0|            let frame = CGRect(x: x + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   54|      0|                               y: y,
   55|      0|                               width: circleSize,
   56|      0|                               height: circleSize)
   57|      0|
   58|      0|            animation.beginTime = beginTime + beginTimes[i]
   59|      0|            circle.frame = frame
   60|      0|            circle.add(animation, forKey: "animation")
   61|      0|            layer.addSublayer(circle)
   62|      0|        }
   63|      0|    }
   64|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallPulseRise.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallPulseRise.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallPulseRise: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSpacing: CGFloat = 2
   34|      0|        let circleSize = (size.width - 4 * circleSpacing) / 5
   35|      0|        let x = (layer.bounds.size.width - size.width) / 2
   36|      0|        let y = (layer.bounds.size.height - circleSize) / 2
   37|      0|        let deltaY = size.height / 2
   38|      0|        let duration: CFTimeInterval = 1
   39|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.15, 0.46, 0.9, 0.6)
   40|      0|        let oddAnimation = self.oddAnimation(duration: duration, deltaY: deltaY, timingFunction: timingFunction)
   41|      0|        let evenAnimation = self.evenAnimation(duration: duration, deltaY: deltaY, timingFunction: timingFunction)
   42|      0|
   43|      0|        // Draw circles
   44|      0|        for i in 0 ..< 5 {
   45|      0|            let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   46|      0|            let frame = CGRect(x: x + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   47|      0|                               y: y,
   48|      0|                               width: circleSize,
   49|      0|                               height: circleSize)
   50|      0|
   51|      0|            circle.frame = frame
   52|      0|            if i % 2 == 0 {
   53|      0|                circle.add(evenAnimation, forKey: "animation")
   54|      0|            } else {
   55|      0|                circle.add(oddAnimation, forKey: "animation")
   56|      0|            }
   57|      0|            layer.addSublayer(circle)
   58|      0|        }
   59|      0|    }
   60|       |
   61|      0|    func oddAnimation(duration: CFTimeInterval, deltaY: CGFloat, timingFunction: CAMediaTimingFunction) -> CAAnimation {
   62|      0|        // Scale animation
   63|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   64|      0|
   65|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   66|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction]
   67|      0|        scaleAnimation.values = [0.4, 1.1, 0.75]
   68|      0|        scaleAnimation.duration = duration
   69|      0|
   70|      0|        // Translate animation
   71|      0|        let translateAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
   72|      0|
   73|      0|        translateAnimation.keyTimes = [0, 0.25, 0.75, 1]
   74|      0|        translateAnimation.timingFunctions = [timingFunction, timingFunction, timingFunction]
   75|      0|        translateAnimation.values = [0, deltaY, -deltaY, 0]
   76|      0|        translateAnimation.duration = duration
   77|      0|
   78|      0|        let animation = CAAnimationGroup()
   79|      0|
   80|      0|        animation.animations = [scaleAnimation, translateAnimation]
   81|      0|        animation.duration = duration
   82|      0|        animation.repeatCount = HUGE
   83|      0|        animation.isRemovedOnCompletion = false
   84|      0|
   85|      0|        return animation
   86|      0|    }
   87|       |
   88|      0|    func evenAnimation(duration: CFTimeInterval, deltaY: CGFloat, timingFunction: CAMediaTimingFunction) -> CAAnimation {
   89|      0|        // Scale animation
   90|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   91|      0|
   92|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   93|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction]
   94|      0|        scaleAnimation.values = [1.1, 0.4, 1]
   95|      0|        scaleAnimation.duration = duration
   96|      0|
   97|      0|        // Translate animation
   98|      0|        let translateAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
   99|      0|
  100|      0|        translateAnimation.keyTimes = [0, 0.25, 0.75, 1]
  101|      0|        translateAnimation.timingFunctions = [timingFunction, timingFunction, timingFunction]
  102|      0|        translateAnimation.values = [0, -deltaY, deltaY, 0]
  103|      0|        translateAnimation.duration = duration
  104|      0|
  105|      0|        let animation = CAAnimationGroup()
  106|      0|
  107|      0|        animation.animations = [scaleAnimation, translateAnimation]
  108|      0|        animation.duration = duration
  109|      0|        animation.repeatCount = HUGE
  110|      0|        animation.isRemovedOnCompletion = false
  111|      0|
  112|      0|        return animation
  113|      0|    }
  114|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallPulseSync.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallPulseSync.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallPulseSync: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSpacing: CGFloat = 2
   34|      0|        let circleSize = (size.width - circleSpacing * 2) / 3
   35|      0|        let x = (layer.bounds.size.width - size.width) / 2
   36|      0|        let y = (layer.bounds.size.height - circleSize) / 2
   37|      0|        let deltaY = (size.height / 2 - circleSize / 2) / 2
   38|      0|        let duration: CFTimeInterval = 0.6
   39|      0|        let beginTime = CACurrentMediaTime()
   40|      0|        let beginTimes: [CFTimeInterval] = [0.07, 0.14, 0.21]
   41|      0|        let timingFunciton = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
   42|      0|
   43|      0|        // Animation
   44|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.translation.y")
   45|      0|
   46|      0|        animation.keyTimes = [0, 0.33, 0.66, 1]
   47|      0|        animation.timingFunctions = [timingFunciton, timingFunciton, timingFunciton]
   48|      0|        animation.values = [0, deltaY, -deltaY, 0]
   49|      0|        animation.duration = duration
   50|      0|        animation.repeatCount = HUGE
   51|      0|        animation.isRemovedOnCompletion = false
   52|      0|
   53|      0|        // Draw circles
   54|      0|        for i in 0 ..< 3 {
   55|      0|            let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   56|      0|            let frame = CGRect(x: x + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   57|      0|                               y: y,
   58|      0|                               width: circleSize,
   59|      0|                               height: circleSize)
   60|      0|
   61|      0|            animation.beginTime = beginTime + beginTimes[i]
   62|      0|            circle.frame = frame
   63|      0|            circle.add(animation, forKey: "animation")
   64|      0|            layer.addSublayer(circle)
   65|      0|        }
   66|      0|    }
   67|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallRotate.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallRotate.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallRotate: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSize: CGFloat = size.width / 5
   34|      0|        let duration: CFTimeInterval = 1
   35|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.7, -0.13, 0.22, 0.86)
   36|      0|
   37|      0|        // Scale animation
   38|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   39|      0|
   40|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   41|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction]
   42|      0|        scaleAnimation.values = [1, 0.6, 1]
   43|      0|        scaleAnimation.duration = duration
   44|      0|
   45|      0|        // Rotate animation
   46|      0|        let rotateAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
   47|      0|
   48|      0|        rotateAnimation.keyTimes = [0, 0.5, 1]
   49|      0|        rotateAnimation.timingFunctions = [timingFunction, timingFunction]
   50|      0|        rotateAnimation.values = [0, Double.pi, 2 * Double.pi]
   51|      0|        rotateAnimation.duration = duration
   52|      0|
   53|      0|        // Animation
   54|      0|        let animation = CAAnimationGroup()
   55|      0|
   56|      0|        animation.animations = [scaleAnimation, rotateAnimation]
   57|      0|        animation.duration = duration
   58|      0|        animation.repeatCount = HUGE
   59|      0|        animation.isRemovedOnCompletion = false
   60|      0|
   61|      0|        // Draw circles
   62|      0|        let leftCircle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   63|      0|        let rightCircle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   64|      0|        let centerCircle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   65|      0|
   66|      0|        leftCircle.opacity = 0.8
   67|      0|        leftCircle.frame = CGRect(x: 0, y: (size.height - circleSize) / 2, width: circleSize, height: circleSize)
   68|      0|        rightCircle.opacity = 0.8
   69|      0|        rightCircle.frame = CGRect(x: size.width - circleSize, y: (size.height - circleSize) / 2, width: circleSize, height: circleSize)
   70|      0|        centerCircle.frame = CGRect(x: (size.width - circleSize) / 2, y: (size.height - circleSize) / 2, width: circleSize, height: circleSize)
   71|      0|
   72|      0|        let circle = CALayer()
   73|      0|        let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2, y: (layer.bounds.size.height - size.height) / 2, width: size.width, height: size.height)
   74|      0|
   75|      0|        circle.frame = frame
   76|      0|        circle.addSublayer(leftCircle)
   77|      0|        circle.addSublayer(rightCircle)
   78|      0|        circle.addSublayer(centerCircle)
   79|      0|        circle.add(animation, forKey: "animation")
   80|      0|        layer.addSublayer(circle)
   81|      0|    }
   82|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallRotateChase.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallRotateChase.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallRotateChase: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSize = size.width / 5
   34|      0|
   35|      0|        // Draw circles
   36|      0|        for i in 0 ..< 5 {
   37|      0|            let factor = Float(i) * 1 / 5
   38|      0|            let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   39|      0|            let animation = rotateAnimation(factor, x: layer.bounds.size.width / 2, y: layer.bounds.size.height / 2, size: CGSize(width: size.width - circleSize, height: size.height - circleSize))
   40|      0|
   41|      0|            circle.frame = CGRect(x: 0, y: 0, width: circleSize, height: circleSize)
   42|      0|            circle.add(animation, forKey: "animation")
   43|      0|            layer.addSublayer(circle)
   44|      0|        }
   45|      0|    }
   46|       |
   47|      0|    func rotateAnimation(_ rate: Float, x: CGFloat, y: CGFloat, size: CGSize) -> CAAnimationGroup {
   48|      0|        let duration: CFTimeInterval = 1.5
   49|      0|        let fromScale = 1 - rate
   50|      0|        let toScale = 0.2 + rate
   51|      0|        let timeFunc = CAMediaTimingFunction(controlPoints: 0.5, 0.15 + rate, 0.25, 1)
   52|      0|
   53|      0|        // Scale animation
   54|      0|        let scaleAnimation = CABasicAnimation(keyPath: "transform.scale")
   55|      0|        scaleAnimation.duration = duration
   56|      0|        scaleAnimation.repeatCount = HUGE
   57|      0|        scaleAnimation.fromValue = fromScale
   58|      0|        scaleAnimation.toValue = toScale
   59|      0|
   60|      0|        // Position animation
   61|      0|        let positionAnimation = CAKeyframeAnimation(keyPath: "position")
   62|      0|        positionAnimation.duration = duration
   63|      0|        positionAnimation.repeatCount = HUGE
   64|      0|        positionAnimation.path = UIBezierPath(arcCenter: CGPoint(x: x, y: y), radius: size.width / 2, startAngle: CGFloat(3 * Double.pi * 0.5), endAngle: CGFloat(3 * Double.pi * 0.5 + 2 * Double.pi), clockwise: true).cgPath
   65|      0|
   66|      0|        // Aniamtion
   67|      0|        let animation = CAAnimationGroup()
   68|      0|        animation.animations = [scaleAnimation, positionAnimation]
   69|      0|        animation.timingFunction = timeFunc
   70|      0|        animation.duration = duration
   71|      0|        animation.repeatCount = HUGE
   72|      0|        animation.isRemovedOnCompletion = false
   73|      0|
   74|      0|        return animation
   75|      0|    }
   76|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallScale.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallScale.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallScale: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 1
   34|      0|
   35|      0|        // Scale animation
   36|      0|        let scaleAnimation = CABasicAnimation(keyPath: "transform.scale")
   37|      0|
   38|      0|        scaleAnimation.duration = duration
   39|      0|        scaleAnimation.fromValue = 0
   40|      0|        scaleAnimation.toValue = 1
   41|      0|
   42|      0|        // Opacity animation
   43|      0|        let opacityAnimation = CABasicAnimation(keyPath: "opacity")
   44|      0|
   45|      0|        opacityAnimation.duration = duration
   46|      0|        opacityAnimation.fromValue = 1
   47|      0|        opacityAnimation.toValue = 0
   48|      0|
   49|      0|        // Animation
   50|      0|        let animation = CAAnimationGroup()
   51|      0|
   52|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   53|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
   54|      0|        animation.duration = duration
   55|      0|        animation.repeatCount = HUGE
   56|      0|        animation.isRemovedOnCompletion = false
   57|      0|
   58|      0|        // Draw circle
   59|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: size, color: color)
   60|      0|
   61|      0|        circle.frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   62|      0|                              y: (layer.bounds.size.height - size.height) / 2,
   63|      0|                              width: size.width,
   64|      0|                              height: size.height)
   65|      0|        circle.add(animation, forKey: "animation")
   66|      0|        layer.addSublayer(circle)
   67|      0|    }
   68|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallScaleMultiple.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallScaleMultiple.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallScaleMultiple: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 1
   34|      0|        let beginTime = CACurrentMediaTime()
   35|      0|        let beginTimes = [0, 0.2, 0.4]
   36|      0|
   37|      0|        // Scale animation
   38|      0|        let scaleAnimation = CABasicAnimation(keyPath: "transform.scale")
   39|      0|
   40|      0|        scaleAnimation.duration = duration
   41|      0|        scaleAnimation.fromValue = 0
   42|      0|        scaleAnimation.toValue = 1
   43|      0|
   44|      0|        // Opacity animation
   45|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   46|      0|
   47|      0|        opacityAnimation.duration = duration
   48|      0|        opacityAnimation.keyTimes = [0, 0.05, 1]
   49|      0|        opacityAnimation.values = [0, 1, 0]
   50|      0|
   51|      0|        // Animation
   52|      0|        let animation = CAAnimationGroup()
   53|      0|
   54|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   55|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   56|      0|        animation.duration = duration
   57|      0|        animation.repeatCount = HUGE
   58|      0|        animation.isRemovedOnCompletion = false
   59|      0|
   60|      0|        // Draw balls
   61|      0|        for i in 0 ..< 3 {
   62|      0|            let circle = NVActivityIndicatorShape.circle.layerWith(size: size, color: color)
   63|      0|            let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   64|      0|                               y: (layer.bounds.size.height - size.height) / 2,
   65|      0|                               width: size.width,
   66|      0|                               height: size.height)
   67|      0|
   68|      0|            animation.beginTime = beginTime + beginTimes[i]
   69|      0|            circle.frame = frame
   70|      0|            circle.opacity = 0
   71|      0|            circle.add(animation, forKey: "animation")
   72|      0|            layer.addSublayer(circle)
   73|      0|        }
   74|      0|    }
   75|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallScaleRipple.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallScaleRipple.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallScaleRipple: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 1
   34|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.21, 0.53, 0.56, 0.8)
   35|      0|
   36|      0|        // Scale animation
   37|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   38|      0|
   39|      0|        scaleAnimation.keyTimes = [0, 0.7]
   40|      0|        scaleAnimation.timingFunction = timingFunction
   41|      0|        scaleAnimation.values = [0.1, 1]
   42|      0|        scaleAnimation.duration = duration
   43|      0|
   44|      0|        // Opacity animation
   45|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   46|      0|
   47|      0|        opacityAnimation.keyTimes = [0, 0.7, 1]
   48|      0|        opacityAnimation.timingFunctions = [timingFunction, timingFunction]
   49|      0|        opacityAnimation.values = [1, 0.7, 0]
   50|      0|        opacityAnimation.duration = duration
   51|      0|
   52|      0|        // Animation
   53|      0|        let animation = CAAnimationGroup()
   54|      0|
   55|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   56|      0|        animation.duration = duration
   57|      0|        animation.repeatCount = HUGE
   58|      0|        animation.isRemovedOnCompletion = false
   59|      0|
   60|      0|        // Draw circle
   61|      0|        let circle = NVActivityIndicatorShape.ring.layerWith(size: size, color: color)
   62|      0|        let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   63|      0|                           y: (layer.bounds.size.height - size.height) / 2,
   64|      0|                           width: size.width,
   65|      0|                           height: size.height)
   66|      0|
   67|      0|        circle.frame = frame
   68|      0|        circle.add(animation, forKey: "animation")
   69|      0|        layer.addSublayer(circle)
   70|      0|    }
   71|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallScaleRippleMultiple.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallScaleRippleMultiple.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallScaleRippleMultiple: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 1.25
   34|      0|        let beginTime = CACurrentMediaTime()
   35|      0|        let beginTimes = [0, 0.2, 0.4]
   36|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.21, 0.53, 0.56, 0.8)
   37|      0|
   38|      0|        // Scale animation
   39|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   40|      0|
   41|      0|        scaleAnimation.keyTimes = [0, 0.7]
   42|      0|        scaleAnimation.timingFunction = timingFunction
   43|      0|        scaleAnimation.values = [0, 1]
   44|      0|        scaleAnimation.duration = duration
   45|      0|
   46|      0|        // Opacity animation
   47|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   48|      0|
   49|      0|        opacityAnimation.keyTimes = [0, 0.7, 1]
   50|      0|        opacityAnimation.timingFunctions = [timingFunction, timingFunction]
   51|      0|        opacityAnimation.values = [1, 0.7, 0]
   52|      0|        opacityAnimation.duration = duration
   53|      0|
   54|      0|        // Animation
   55|      0|        let animation = CAAnimationGroup()
   56|      0|
   57|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   58|      0|        animation.duration = duration
   59|      0|        animation.repeatCount = HUGE
   60|      0|        animation.isRemovedOnCompletion = false
   61|      0|
   62|      0|        // Draw circles
   63|      0|        for i in 0 ..< 3 {
   64|      0|            let circle = NVActivityIndicatorShape.ring.layerWith(size: size, color: color)
   65|      0|            let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   66|      0|                               y: (layer.bounds.size.height - size.height) / 2,
   67|      0|                               width: size.width,
   68|      0|                               height: size.height)
   69|      0|
   70|      0|            animation.beginTime = beginTime + beginTimes[i]
   71|      0|            circle.frame = frame
   72|      0|            circle.add(animation, forKey: "animation")
   73|      0|            layer.addSublayer(circle)
   74|      0|        }
   75|      0|    }
   76|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallSpinFadeLoader.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallSpinFadeLoader.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallSpinFadeLoader: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      1|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      1|        let circleSpacing: CGFloat = -2
   34|      1|        let circleSize = (size.width - 4 * circleSpacing) / 5
   35|      1|        let x = (layer.bounds.size.width - size.width) / 2
   36|      1|        let y = (layer.bounds.size.height - size.height) / 2
   37|      1|        let duration: CFTimeInterval = 1
   38|      1|        let beginTime = CACurrentMediaTime()
   39|      1|        let beginTimes: [CFTimeInterval] = [0, 0.12, 0.24, 0.36, 0.48, 0.6, 0.72, 0.84]
   40|      1|
   41|      1|        // Scale animation
   42|      1|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   43|      1|
   44|      1|        scaleAnimation.keyTimes = [0, 0.5, 1]
   45|      1|        scaleAnimation.values = [1, 0.4, 1]
   46|      1|        scaleAnimation.duration = duration
   47|      1|
   48|      1|        // Opacity animation
   49|      1|        let opacityAnimaton = CAKeyframeAnimation(keyPath: "opacity")
   50|      1|
   51|      1|        opacityAnimaton.keyTimes = [0, 0.5, 1]
   52|      1|        opacityAnimaton.values = [1, 0.3, 1]
   53|      1|        opacityAnimaton.duration = duration
   54|      1|
   55|      1|        // Animation
   56|      1|        let animation = CAAnimationGroup()
   57|      1|
   58|      1|        animation.animations = [scaleAnimation, opacityAnimaton]
   59|      1|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   60|      1|        animation.duration = duration
   61|      1|        animation.repeatCount = HUGE
   62|      1|        animation.isRemovedOnCompletion = false
   63|      1|
   64|      1|        // Draw circles
   65|      8|        for i in 0 ..< 8 {
   66|      8|            let circle = circleAt(angle: CGFloat(Double.pi / 4) * CGFloat(i),
   67|      8|                                  size: circleSize,
   68|      8|                                  origin: CGPoint(x: x, y: y),
   69|      8|                                  containerSize: size,
   70|      8|                                  color: color)
   71|      8|
   72|      8|            animation.beginTime = beginTime + beginTimes[i]
   73|      8|            circle.add(animation, forKey: "animation")
   74|      8|            layer.addSublayer(circle)
   75|      8|        }
   76|      1|    }
   77|       |
   78|      8|    func circleAt(angle: CGFloat, size: CGFloat, origin: CGPoint, containerSize: CGSize, color: UIColor) -> CALayer {
   79|      8|        let radius = containerSize.width / 2 - size / 2
   80|      8|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: size, height: size), color: color)
   81|      8|        let frame = CGRect(
   82|      8|            x: origin.x + radius * (cos(angle) + 1),
   83|      8|            y: origin.y + radius * (sin(angle) + 1),
   84|      8|            width: size,
   85|      8|            height: size)
   86|      8|
   87|      8|        circle.frame = frame
   88|      8|
   89|      8|        return circle
   90|      8|    }
   91|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallTrianglePath.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallTrianglePath.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallTrianglePath: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSize = size.width / 5
   34|      0|        let deltaX = size.width / 2 - circleSize / 2
   35|      0|        let deltaY = size.height / 2 - circleSize / 2
   36|      0|        let x = (layer.bounds.size.width - size.width) / 2
   37|      0|        let y = (layer.bounds.size.height - size.height) / 2
   38|      0|        let duration: CFTimeInterval = 2
   39|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
   40|      0|
   41|      0|        // Animation
   42|      0|        let animation = CAKeyframeAnimation(keyPath: "transform")
   43|      0|
   44|      0|        animation.keyTimes = [0, 0.33, 0.66, 1]
   45|      0|        animation.timingFunctions = [timingFunction, timingFunction, timingFunction]
   46|      0|        animation.duration = duration
   47|      0|        animation.repeatCount = HUGE
   48|      0|        animation.isRemovedOnCompletion = false
   49|      0|
   50|      0|        // Top-center circle
   51|      0|        let topCenterCircle = NVActivityIndicatorShape.ring.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   52|      0|
   53|      0|        changeAnimation(animation, values: ["{0,0}", "{hx,fy}", "{-hx,fy}", "{0,0}"], deltaX: deltaX, deltaY: deltaY)
   54|      0|        topCenterCircle.frame = CGRect(x: x + size.width / 2 - circleSize / 2, y: y, width: circleSize, height: circleSize)
   55|      0|        topCenterCircle.add(animation, forKey: "animation")
   56|      0|        layer.addSublayer(topCenterCircle)
   57|      0|
   58|      0|        // Bottom-left circle
   59|      0|        let bottomLeftCircle = NVActivityIndicatorShape.ring.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   60|      0|
   61|      0|        changeAnimation(animation, values: ["{0,0}", "{hx,-fy}", "{fx,0}", "{0,0}"], deltaX: deltaX, deltaY: deltaY)
   62|      0|        bottomLeftCircle.frame = CGRect(x: x, y: y + size.height - circleSize, width: circleSize, height: circleSize)
   63|      0|        bottomLeftCircle.add(animation, forKey: "animation")
   64|      0|        layer.addSublayer(bottomLeftCircle)
   65|      0|
   66|      0|        // Bottom-right circle
   67|      0|        let bottomRightCircle = NVActivityIndicatorShape.ring.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   68|      0|
   69|      0|        changeAnimation(animation, values: ["{0,0}", "{-fx,0}", "{-hx,-fy}", "{0,0}"], deltaX: deltaX, deltaY: deltaY)
   70|      0|        bottomRightCircle.frame = CGRect(x: x + size.width - circleSize, y: y + size.height - circleSize, width: circleSize, height: circleSize)
   71|      0|        bottomRightCircle.add(animation, forKey: "animation")
   72|      0|        layer.addSublayer(bottomRightCircle)
   73|      0|    }
   74|       |
   75|      0|    func changeAnimation(_ animation: CAKeyframeAnimation, values rawValues: [String], deltaX: CGFloat, deltaY: CGFloat) {
   76|      0|        let values = NSMutableArray(capacity: 5)
   77|      0|
   78|      0|        for rawValue in rawValues {
   79|      0|            let point = CGPointFromString(translateString(rawValue, deltaX: deltaX, deltaY: deltaY))
   80|      0|
   81|      0|            values.add(NSValue(caTransform3D: CATransform3DMakeTranslation(point.x, point.y, 0)))
   82|      0|        }
   83|      0|        animation.values = values as [AnyObject]
   84|      0|    }
   85|       |
   86|      0|    func translateString(_ valueString: String, deltaX: CGFloat, deltaY: CGFloat) -> String {
   87|      0|        let valueMutableString = NSMutableString(string: valueString)
   88|      0|        let fullDeltaX = 2 * deltaX
   89|      0|        let fullDeltaY = 2 * deltaY
   90|      0|        var range = NSRange(location: 0, length: valueMutableString.length)
   91|      0|
   92|      0|        valueMutableString.replaceOccurrences(of: "hx", with: "\(deltaX)", options: NSString.CompareOptions.caseInsensitive, range: range)
   93|      0|        range.length = valueMutableString.length
   94|      0|        valueMutableString.replaceOccurrences(of: "fx", with: "\(fullDeltaX)", options: NSString.CompareOptions.caseInsensitive, range: range)
   95|      0|        range.length = valueMutableString.length
   96|      0|        valueMutableString.replaceOccurrences(of: "hy", with: "\(deltaY)", options: NSString.CompareOptions.caseInsensitive, range: range)
   97|      0|        range.length = valueMutableString.length
   98|      0|        valueMutableString.replaceOccurrences(of: "fy", with: "\(fullDeltaY)", options: NSString.CompareOptions.caseInsensitive, range: range)
   99|      0|
  100|      0|        return valueMutableString as String
  101|      0|    }
  102|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallZigZag.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallZigZag.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |import QuartzCore
   30|       |
   31|       |class NVActivityIndicatorAnimationBallZigZag: NVActivityIndicatorAnimationDelegate {
   32|       |
   33|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   34|      0|        let circleSize: CGFloat = size.width / 5
   35|      0|        let duration: CFTimeInterval = 0.7
   36|      0|        let deltaX = size.width / 2 - circleSize / 2
   37|      0|        let deltaY = size.height / 2 - circleSize / 2
   38|      0|        let frame = CGRect(x: (layer.bounds.size.width - circleSize) / 2, y: (layer.bounds.size.height - circleSize) / 2, width: circleSize, height: circleSize)
   39|      0|
   40|      0|        // Circle 1 animation
   41|      0|        let animation = CAKeyframeAnimation(keyPath: "transform")
   42|      0|
   43|      0|        animation.keyTimes = [0, 0.33, 0.66, 1]
   44|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   45|      0|
   46|      0|        animation.values = [
   47|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0)),
   48|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(-deltaX, -deltaY, 0)),
   49|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(deltaX, -deltaY, 0)),
   50|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0))
   51|      0|        ]
   52|      0|        animation.duration = duration
   53|      0|        animation.repeatCount = HUGE
   54|      0|        animation.isRemovedOnCompletion = false
   55|      0|
   56|      0|        // Draw circle 1
   57|      0|        circleAt(frame: frame, layer: layer, size: CGSize(width: circleSize, height: circleSize), color: color, animation: animation)
   58|      0|
   59|      0|        // Circle 2 animation
   60|      0|        animation.values = [
   61|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0)),
   62|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(deltaX, deltaY, 0)),
   63|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(-deltaX, deltaY, 0)),
   64|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0))
   65|      0|        ]
   66|      0|
   67|      0|        // Draw circle 2
   68|      0|        circleAt(frame: frame, layer: layer, size: CGSize(width: circleSize, height: circleSize), color: color, animation: animation)
   69|      0|    }
   70|       |
   71|      0|    func circleAt(frame: CGRect, layer: CALayer, size: CGSize, color: UIColor, animation: CAAnimation) {
   72|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: size, color: color)
   73|      0|
   74|      0|        circle.frame = frame
   75|      0|        circle.add(animation, forKey: "animation")
   76|      0|        layer.addSublayer(circle)
   77|      0|    }
   78|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBallZigZagDeflect.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBallZigZagDeflect.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBallZigZagDeflect: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let circleSize: CGFloat = size.width / 5
   34|      0|        let duration: CFTimeInterval = 0.75
   35|      0|        let deltaX = size.width / 2 - circleSize / 2
   36|      0|        let deltaY = size.height / 2 - circleSize / 2
   37|      0|        let frame = CGRect(x: (layer.bounds.size.width - circleSize) / 2, y: (layer.bounds.size.height - circleSize) / 2, width: circleSize, height: circleSize)
   38|      0|
   39|      0|        // Circle 1 animation
   40|      0|        let animation = CAKeyframeAnimation(keyPath: "transform")
   41|      0|
   42|      0|        animation.keyTimes = [0, 0.33, 0.66, 1]
   43|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   44|      0|
   45|      0|        animation.values = [
   46|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0)),
   47|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(-deltaX, -deltaY, 0)),
   48|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(deltaX, -deltaY, 0)),
   49|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0))
   50|      0|        ]
   51|      0|        animation.duration = duration
   52|      0|        animation.repeatCount = HUGE
   53|      0|        animation.autoreverses = true
   54|      0|        animation.isRemovedOnCompletion = false
   55|      0|
   56|      0|        // Draw circle 1
   57|      0|        circleAt(frame: frame, layer: layer, size: CGSize(width: circleSize, height: circleSize), color: color, animation: animation)
   58|      0|
   59|      0|        // Circle 2 animation
   60|      0|        animation.values = [
   61|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0)),
   62|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(deltaX, deltaY, 0)),
   63|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(-deltaX, deltaY, 0)),
   64|      0|            NSValue(caTransform3D: CATransform3DMakeTranslation(0, 0, 0))
   65|      0|        ]
   66|      0|
   67|      0|        // Draw circle 2
   68|      0|        circleAt(frame: frame, layer: layer, size: CGSize(width: circleSize, height: circleSize), color: color, animation: animation)
   69|      0|    }
   70|       |
   71|      0|    func circleAt(frame: CGRect, layer: CALayer, size: CGSize, color: UIColor, animation: CAAnimation) {
   72|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: size, color: color)
   73|      0|
   74|      0|        circle.frame = frame
   75|      0|        circle.add(animation, forKey: "animation")
   76|      0|        layer.addSublayer(circle)
   77|      0|    }
   78|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationBlank.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBlank.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationBlank: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in _: CALayer, size _: CGSize, color _: UIColor) {
   33|      0|        // Do nothing
   34|      0|    }
   35|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationCircleStrokeSpin.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationCircleStrokeSpin.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationCircleStrokeSpin: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let beginTime: Double = 0.5
   34|      0|        let strokeStartDuration: Double = 1.2
   35|      0|        let strokeEndDuration: Double = 0.7
   36|      0|
   37|      0|        let rotationAnimation = CABasicAnimation(keyPath: "transform.rotation")
   38|      0|        rotationAnimation.byValue = Float.pi * 2
   39|      0|        rotationAnimation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   40|      0|
   41|      0|        let strokeEndAnimation = CABasicAnimation(keyPath: "strokeEnd")
   42|      0|        strokeEndAnimation.duration = strokeEndDuration
   43|      0|        strokeEndAnimation.timingFunction = CAMediaTimingFunction(controlPoints: 0.4, 0.0, 0.2, 1.0)
   44|      0|        strokeEndAnimation.fromValue = 0
   45|      0|        strokeEndAnimation.toValue = 1
   46|      0|
   47|      0|        let strokeStartAnimation = CABasicAnimation(keyPath: "strokeStart")
   48|      0|        strokeStartAnimation.duration = strokeStartDuration
   49|      0|        strokeStartAnimation.timingFunction = CAMediaTimingFunction(controlPoints: 0.4, 0.0, 0.2, 1.0)
   50|      0|        strokeStartAnimation.fromValue = 0
   51|      0|        strokeStartAnimation.toValue = 1
   52|      0|        strokeStartAnimation.beginTime = beginTime
   53|      0|
   54|      0|        let groupAnimation = CAAnimationGroup()
   55|      0|        groupAnimation.animations = [rotationAnimation, strokeEndAnimation, strokeStartAnimation]
   56|      0|        groupAnimation.duration = strokeStartDuration + beginTime
   57|      0|        groupAnimation.repeatCount = .infinity
   58|      0|        groupAnimation.isRemovedOnCompletion = false
   59|      0|        groupAnimation.fillMode = kCAFillModeForwards
   60|      0|
   61|      0|        let circle = NVActivityIndicatorShape.stroke.layerWith(size: size, color: color)
   62|      0|        let frame = CGRect(
   63|      0|            x: (layer.bounds.width - size.width) / 2,
   64|      0|            y: (layer.bounds.height - size.height) / 2,
   65|      0|            width: size.width,
   66|      0|            height: size.height
   67|      0|        )
   68|      0|
   69|      0|        circle.frame = frame
   70|      0|        circle.add(groupAnimation, forKey: "animation")
   71|      0|        layer.addSublayer(circle)
   72|      0|    }
   73|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationCubeTransition.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationCubeTransition.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationCubeTransition: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let squareSize = size.width / 5
   34|      0|        let x = (layer.bounds.size.width - size.width) / 2
   35|      0|        let y = (layer.bounds.size.height - size.height) / 2
   36|      0|        let deltaX = size.width - squareSize
   37|      0|        let deltaY = size.height - squareSize
   38|      0|        let duration: CFTimeInterval = 1.6
   39|      0|        let beginTime = CACurrentMediaTime()
   40|      0|        let beginTimes: [CFTimeInterval] = [0, -0.8]
   41|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
   42|      0|
   43|      0|        // Scale animation
   44|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   45|      0|
   46|      0|        scaleAnimation.keyTimes = [0, 0.25, 0.5, 0.75, 1]
   47|      0|        scaleAnimation.timingFunctions = [timingFunction, timingFunction, timingFunction, timingFunction]
   48|      0|        scaleAnimation.values = [1, 0.5, 1, 0.5, 1]
   49|      0|        scaleAnimation.duration = duration
   50|      0|
   51|      0|        // Translate animation
   52|      0|        let translateAnimation = CAKeyframeAnimation(keyPath: "transform.translation")
   53|      0|
   54|      0|        translateAnimation.keyTimes = scaleAnimation.keyTimes
   55|      0|        translateAnimation.timingFunctions = scaleAnimation.timingFunctions
   56|      0|        translateAnimation.values = [
   57|      0|            NSValue(cgSize: CGSize(width: 0, height: 0)),
   58|      0|            NSValue(cgSize: CGSize(width: deltaX, height: 0)),
   59|      0|            NSValue(cgSize: CGSize(width: deltaX, height: deltaY)),
   60|      0|            NSValue(cgSize: CGSize(width: 0, height: deltaY)),
   61|      0|            NSValue(cgSize: CGSize(width: 0, height: 0))
   62|      0|        ]
   63|      0|        translateAnimation.duration = duration
   64|      0|
   65|      0|        // Rotate animation
   66|      0|        let rotateAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
   67|      0|
   68|      0|        rotateAnimation.keyTimes = scaleAnimation.keyTimes
   69|      0|        rotateAnimation.timingFunctions = scaleAnimation.timingFunctions
   70|      0|        rotateAnimation.values = [0, -Double.pi / 2, -Double.pi, -1.5 * Double.pi, -2 * Double.pi]
   71|      0|        rotateAnimation.duration = duration
   72|      0|
   73|      0|        // Animation
   74|      0|        let animation = CAAnimationGroup()
   75|      0|
   76|      0|        animation.animations = [scaleAnimation, translateAnimation, rotateAnimation]
   77|      0|        animation.duration = duration
   78|      0|        animation.repeatCount = HUGE
   79|      0|        animation.isRemovedOnCompletion = false
   80|      0|
   81|      0|        // Draw squares
   82|      0|        for i in 0 ..< 2 {
   83|      0|            let square = NVActivityIndicatorShape.rectangle.layerWith(size: CGSize(width: squareSize, height: squareSize), color: color)
   84|      0|            let frame = CGRect(x: x, y: y, width: squareSize, height: squareSize)
   85|      0|
   86|      0|            animation.beginTime = beginTime + beginTimes[i]
   87|      0|            square.frame = frame
   88|      0|            square.add(animation, forKey: "animation")
   89|      0|            layer.addSublayer(square)
   90|      0|        }
   91|      0|    }
   92|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationLineScale.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationBarScale.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationLineScale: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let lineSize = size.width / 9
   34|      0|        let x = (layer.bounds.size.width - size.width) / 2
   35|      0|        let y = (layer.bounds.size.height - size.height) / 2
   36|      0|        let duration: CFTimeInterval = 1
   37|      0|        let beginTime = CACurrentMediaTime()
   38|      0|        let beginTimes = [0.1, 0.2, 0.3, 0.4, 0.5]
   39|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.2, 0.68, 0.18, 1.08)
   40|      0|
   41|      0|        // Animation
   42|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.scale.y")
   43|      0|
   44|      0|        animation.keyTimes = [0, 0.5, 1]
   45|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   46|      0|        animation.values = [1, 0.4, 1]
   47|      0|        animation.duration = duration
   48|      0|        animation.repeatCount = HUGE
   49|      0|        animation.isRemovedOnCompletion = false
   50|      0|
   51|      0|        // Draw lines
   52|      0|        for i in 0 ..< 5 {
   53|      0|            let line = NVActivityIndicatorShape.line.layerWith(size: CGSize(width: lineSize, height: size.height), color: color)
   54|      0|            let frame = CGRect(x: x + lineSize * 2 * CGFloat(i), y: y, width: lineSize, height: size.height)
   55|      0|
   56|      0|            animation.beginTime = beginTime + beginTimes[i]
   57|      0|            line.frame = frame
   58|      0|            line.add(animation, forKey: "animation")
   59|      0|            layer.addSublayer(line)
   60|      0|        }
   61|      0|    }
   62|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationLineScaleParty.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationLineScaleParty.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationLineScaleParty: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let lineSize = size.width / 7
   34|      0|        let x = (layer.bounds.size.width - size.width) / 2
   35|      0|        let y = (layer.bounds.size.height - size.height) / 2
   36|      0|        let durations: [CFTimeInterval] = [1.26, 0.43, 1.01, 0.73]
   37|      0|        let beginTime = CACurrentMediaTime()
   38|      0|        let beginTimes: [CFTimeInterval] = [0.77, 0.29, 0.28, 0.74]
   39|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
   40|      0|
   41|      0|        // Animation
   42|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.scale")
   43|      0|
   44|      0|        animation.keyTimes = [0, 0.5, 1]
   45|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   46|      0|        animation.values = [1, 0.5, 1]
   47|      0|        animation.repeatCount = HUGE
   48|      0|        animation.isRemovedOnCompletion = false
   49|      0|
   50|      0|        for i in 0 ..< 4 {
   51|      0|            let line = NVActivityIndicatorShape.line.layerWith(size: CGSize(width: lineSize, height: size.height), color: color)
   52|      0|            let frame = CGRect(x: x + lineSize * 2 * CGFloat(i), y: y, width: lineSize, height: size.height)
   53|      0|
   54|      0|            animation.beginTime = beginTime + beginTimes[i]
   55|      0|            animation.duration = durations[i]
   56|      0|            line.frame = frame
   57|      0|            line.add(animation, forKey: "animation")
   58|      0|            layer.addSublayer(line)
   59|      0|        }
   60|      0|    }
   61|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationLineScalePulseOut.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationLineScalePulseOut.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationLineScalePulseOut: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let lineSize = size.width / 9
   34|      0|        let x = (layer.bounds.size.width - size.width) / 2
   35|      0|        let y = (layer.bounds.size.height - size.height) / 2
   36|      0|        let duration: CFTimeInterval = 1
   37|      0|        let beginTime = CACurrentMediaTime()
   38|      0|        let beginTimes = [0.4, 0.2, 0, 0.2, 0.4]
   39|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.85, 0.25, 0.37, 0.85)
   40|      0|
   41|      0|        // Animation
   42|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.scale.y")
   43|      0|
   44|      0|        animation.keyTimes = [0, 0.5, 1]
   45|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   46|      0|        animation.values = [1, 0.4, 1]
   47|      0|        animation.duration = duration
   48|      0|        animation.repeatCount = HUGE
   49|      0|        animation.isRemovedOnCompletion = false
   50|      0|
   51|      0|        // Draw lines
   52|      0|        for i in 0 ..< 5 {
   53|      0|            let line = NVActivityIndicatorShape.line.layerWith(size: CGSize(width: lineSize, height: size.height), color: color)
   54|      0|            let frame = CGRect(x: x + lineSize * 2 * CGFloat(i),
   55|      0|                               y: y,
   56|      0|                               width: lineSize,
   57|      0|                               height: size.height)
   58|      0|
   59|      0|            animation.beginTime = beginTime + beginTimes[i]
   60|      0|            line.frame = frame
   61|      0|            line.add(animation, forKey: "animation")
   62|      0|            layer.addSublayer(line)
   63|      0|        }
   64|      0|    }
   65|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationLineScalePulseOutRapid.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationLineScalePulseOutRapid.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationLineScalePulseOutRapid: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let lineSize = size.width / 9
   34|      0|        let x = (layer.bounds.size.width - size.width) / 2
   35|      0|        let y = (layer.bounds.size.height - size.height) / 2
   36|      0|        let duration: CFTimeInterval = 0.9
   37|      0|        let beginTime = CACurrentMediaTime()
   38|      0|        let beginTimes = [0.5, 0.25, 0, 0.25, 0.5]
   39|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.11, 0.49, 0.38, 0.78)
   40|      0|
   41|      0|        // Animation
   42|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.scale.y")
   43|      0|
   44|      0|        animation.keyTimes = [0, 0.8, 0.9]
   45|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   46|      0|        animation.beginTime = beginTime
   47|      0|        animation.values = [1, 0.3, 1]
   48|      0|        animation.duration = duration
   49|      0|        animation.repeatCount = HUGE
   50|      0|        animation.isRemovedOnCompletion = false
   51|      0|
   52|      0|        // Draw lines
   53|      0|        for i in 0 ..< 5 {
   54|      0|            let line = NVActivityIndicatorShape.line.layerWith(size: CGSize(width: lineSize, height: size.height), color: color)
   55|      0|            let frame = CGRect(x: x + lineSize * 2 * CGFloat(i),
   56|      0|                               y: y,
   57|      0|                               width: lineSize,
   58|      0|                               height: size.height)
   59|      0|
   60|      0|            animation.beginTime = beginTime + beginTimes[i]
   61|      0|            line.frame = frame
   62|      0|            line.add(animation, forKey: "animation")
   63|      0|            layer.addSublayer(line)
   64|      0|        }
   65|      0|    }
   66|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationLineSpinFadeLoader.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationLineSpinFadeLoader.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationLineSpinFadeLoader: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let lineSpacing: CGFloat = 2
   34|      0|        let lineSize = CGSize(width: (size.width - 4 * lineSpacing) / 5, height: (size.height - 2 * lineSpacing) / 3)
   35|      0|        let x = (layer.bounds.size.width - size.width) / 2
   36|      0|        let y = (layer.bounds.size.height - size.height) / 2
   37|      0|        let duration: CFTimeInterval = 1.2
   38|      0|        let beginTime = CACurrentMediaTime()
   39|      0|        let beginTimes: [CFTimeInterval] = [0.12, 0.24, 0.36, 0.48, 0.6, 0.72, 0.84, 0.96]
   40|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
   41|      0|
   42|      0|        // Animation
   43|      0|        let animation = CAKeyframeAnimation(keyPath: "opacity")
   44|      0|
   45|      0|        animation.keyTimes = [0, 0.5, 1]
   46|      0|        animation.timingFunctions = [timingFunction, timingFunction]
   47|      0|        animation.values = [1, 0.3, 1]
   48|      0|        animation.duration = duration
   49|      0|        animation.repeatCount = HUGE
   50|      0|        animation.isRemovedOnCompletion = false
   51|      0|
   52|      0|        // Draw lines
   53|      0|        for i in 0 ..< 8 {
   54|      0|            let line = lineAt(angle: CGFloat(Double.pi / 4 * Double(i)),
   55|      0|                              size: lineSize,
   56|      0|                              origin: CGPoint(x: x, y: y),
   57|      0|                              containerSize: size,
   58|      0|                              color: color)
   59|      0|
   60|      0|            animation.beginTime = beginTime + beginTimes[i]
   61|      0|            line.add(animation, forKey: "animation")
   62|      0|            layer.addSublayer(line)
   63|      0|        }
   64|      0|    }
   65|       |
   66|      0|    func lineAt(angle: CGFloat, size: CGSize, origin: CGPoint, containerSize: CGSize, color: UIColor) -> CALayer {
   67|      0|        let radius = containerSize.width / 2 - max(size.width, size.height) / 2
   68|      0|        let lineContainerSize = CGSize(width: max(size.width, size.height), height: max(size.width, size.height))
   69|      0|        let lineContainer = CALayer()
   70|      0|        let lineContainerFrame = CGRect(
   71|      0|            x: origin.x + radius * (cos(angle) + 1),
   72|      0|            y: origin.y + radius * (sin(angle) + 1),
   73|      0|            width: lineContainerSize.width,
   74|      0|            height: lineContainerSize.height)
   75|      0|        let line = NVActivityIndicatorShape.line.layerWith(size: size, color: color)
   76|      0|        let lineFrame = CGRect(
   77|      0|            x: (lineContainerSize.width - size.width) / 2,
   78|      0|            y: (lineContainerSize.height - size.height) / 2,
   79|      0|            width: size.width,
   80|      0|            height: size.height)
   81|      0|
   82|      0|        lineContainer.frame = lineContainerFrame
   83|      0|        line.frame = lineFrame
   84|      0|        lineContainer.addSublayer(line)
   85|      0|        lineContainer.sublayerTransform = CATransform3DMakeRotation(CGFloat(Double.pi / 2) + angle, 0, 0, 1)
   86|      0|
   87|      0|        return lineContainer
   88|      0|    }
   89|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationOrbit.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationOrbit.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationOrbit: NVActivityIndicatorAnimationDelegate {
   31|       |    let duration: CFTimeInterval = 1.9
   32|       |    let satelliteCoreRatio: CGFloat = 0.25
   33|       |    let distanceRatio: CGFloat = 1.5 // distance / core size
   34|       |
   35|       |    var coreSize: CGFloat = 0
   36|       |    var satelliteSize: CGFloat = 0
   37|       |
   38|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   39|      0|        coreSize = size.width / (1 + satelliteCoreRatio + distanceRatio)
   40|      0|        satelliteSize = coreSize * satelliteCoreRatio
   41|      0|
   42|      0|        ring1InLayer(layer, size: size, color: color)
   43|      0|        ring2InLayer(layer, size: size, color: color)
   44|      0|        coreInLayer(layer, size: size, color: color)
   45|      0|        satelliteInLayer(layer, size: size, color: color)
   46|      0|    }
   47|       |
   48|      0|    func ring1InLayer(_ layer: CALayer, size _: CGSize, color: UIColor) {
   49|      0|        // Scale animation
   50|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   51|      0|
   52|      0|        scaleAnimation.keyTimes = [0, 0.45, 0.45, 1]
   53|      0|        scaleAnimation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   54|      0|        scaleAnimation.values = [0, 0, 1.3, 2]
   55|      0|        scaleAnimation.duration = duration
   56|      0|
   57|      0|        // Opacity animation
   58|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   59|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.19, 1, 0.22, 1)
   60|      0|
   61|      0|        opacityAnimation.keyTimes = [0, 0.45, 1]
   62|      0|        scaleAnimation.timingFunctions = [CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear), timingFunction]
   63|      0|        opacityAnimation.values = [0.8, 0.8, 0]
   64|      0|        opacityAnimation.duration = duration
   65|      0|
   66|      0|        // Animation
   67|      0|        let animation = CAAnimationGroup()
   68|      0|
   69|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   70|      0|        animation.duration = duration
   71|      0|        animation.repeatCount = HUGE
   72|      0|        animation.isRemovedOnCompletion = false
   73|      0|
   74|      0|        // Draw circle
   75|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: coreSize, height: coreSize), color: color)
   76|      0|        let frame = CGRect(x: (layer.bounds.size.width - coreSize) / 2,
   77|      0|                           y: (layer.bounds.size.height - coreSize) / 2,
   78|      0|                           width: coreSize,
   79|      0|                           height: coreSize)
   80|      0|
   81|      0|        circle.frame = frame
   82|      0|        circle.add(animation, forKey: "animation")
   83|      0|        layer.addSublayer(circle)
   84|      0|    }
   85|       |
   86|      0|    func ring2InLayer(_ layer: CALayer, size _: CGSize, color: UIColor) {
   87|      0|        // Scale animation
   88|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   89|      0|
   90|      0|        scaleAnimation.keyTimes = [0, 0.55, 0.55, 1]
   91|      0|        scaleAnimation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   92|      0|        scaleAnimation.values = [0, 0, 1.3, 2.1]
   93|      0|        scaleAnimation.duration = duration
   94|      0|
   95|      0|        // Opacity animation
   96|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   97|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.19, 1, 0.22, 1)
   98|      0|
   99|      0|        opacityAnimation.keyTimes = [0, 0.55, 0.65, 1]
  100|      0|        scaleAnimation.timingFunctions = [CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear), timingFunction]
  101|      0|        opacityAnimation.values = [0.7, 0.7, 0, 0]
  102|      0|        opacityAnimation.duration = duration
  103|      0|
  104|      0|        // Animation
  105|      0|        let animation = CAAnimationGroup()
  106|      0|
  107|      0|        animation.animations = [scaleAnimation, opacityAnimation]
  108|      0|        animation.duration = duration
  109|      0|        animation.repeatCount = HUGE
  110|      0|        animation.isRemovedOnCompletion = false
  111|      0|
  112|      0|        // Draw circle
  113|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: coreSize, height: coreSize), color: color)
  114|      0|        let frame = CGRect(x: (layer.bounds.size.width - coreSize) / 2,
  115|      0|                           y: (layer.bounds.size.height - coreSize) / 2,
  116|      0|                           width: coreSize,
  117|      0|                           height: coreSize)
  118|      0|
  119|      0|        circle.frame = frame
  120|      0|        circle.add(animation, forKey: "animation")
  121|      0|        layer.addSublayer(circle)
  122|      0|    }
  123|       |
  124|      0|    func coreInLayer(_ layer: CALayer, size _: CGSize, color: UIColor) {
  125|      0|        let inTimingFunction = CAMediaTimingFunction(controlPoints: 0.7, 0, 1, 0.5)
  126|      0|        let outTimingFunction = CAMediaTimingFunction(controlPoints: 0, 0.7, 0.5, 1)
  127|      0|        let standByTimingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
  128|      0|
  129|      0|        // Scale animation
  130|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
  131|      0|
  132|      0|        scaleAnimation.keyTimes = [0, 0.45, 0.55, 1]
  133|      0|        scaleAnimation.timingFunctions = [inTimingFunction, standByTimingFunction, outTimingFunction]
  134|      0|        scaleAnimation.values = [1, 1.3, 1.3, 1]
  135|      0|        scaleAnimation.duration = duration
  136|      0|        scaleAnimation.repeatCount = HUGE
  137|      0|        scaleAnimation.isRemovedOnCompletion = false
  138|      0|
  139|      0|        // Draw circle
  140|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: coreSize, height: coreSize), color: color)
  141|      0|        let frame = CGRect(x: (layer.bounds.size.width - coreSize) / 2,
  142|      0|                           y: (layer.bounds.size.height - coreSize) / 2,
  143|      0|                           width: coreSize,
  144|      0|                           height: coreSize)
  145|      0|
  146|      0|        circle.frame = frame
  147|      0|        circle.add(scaleAnimation, forKey: "animation")
  148|      0|        layer.addSublayer(circle)
  149|      0|    }
  150|       |
  151|      0|    func satelliteInLayer(_ layer: CALayer, size: CGSize, color: UIColor) {
  152|      0|        // Rotate animation
  153|      0|        let rotateAnimation = CAKeyframeAnimation(keyPath: "position")
  154|      0|
  155|      0|        rotateAnimation.path = UIBezierPath(arcCenter: CGPoint(x: layer.bounds.midX, y: layer.bounds.midY),
  156|      0|                                            radius: (size.width - satelliteSize) / 2,
  157|      0|                                            startAngle: CGFloat(Double.pi * 1.5),
  158|      0|                                            endAngle: CGFloat(Double.pi * 1.5 + 4 * Double.pi),
  159|      0|                                            clockwise: true).cgPath
  160|      0|        rotateAnimation.duration = duration * 2
  161|      0|        rotateAnimation.repeatCount = HUGE
  162|      0|        rotateAnimation.isRemovedOnCompletion = false
  163|      0|
  164|      0|        // Draw circle
  165|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: satelliteSize, height: satelliteSize), color: color)
  166|      0|        let frame = CGRect(x: 0, y: 0, width: satelliteSize, height: satelliteSize)
  167|      0|
  168|      0|        circle.frame = frame
  169|      0|        circle.add(rotateAnimation, forKey: "animation")
  170|      0|        layer.addSublayer(circle)
  171|      0|    }
  172|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationPacman.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationPacman.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationPacman: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        circleInLayer(layer, size: size, color: color)
   34|      0|        pacmanInLayer(layer, size: size, color: color)
   35|      0|    }
   36|       |
   37|      0|    func pacmanInLayer(_ layer: CALayer, size: CGSize, color: UIColor) {
   38|      0|        let pacmanSize = 2 * size.width / 3
   39|      0|        let pacmanDuration: CFTimeInterval = 0.5
   40|      0|        let timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
   41|      0|
   42|      0|        // Stroke start animation
   43|      0|        let strokeStartAnimation = CAKeyframeAnimation(keyPath: "strokeStart")
   44|      0|
   45|      0|        strokeStartAnimation.keyTimes = [0, 0.5, 1]
   46|      0|        strokeStartAnimation.timingFunctions = [timingFunction, timingFunction]
   47|      0|        strokeStartAnimation.values = [0.125, 0, 0.125]
   48|      0|        strokeStartAnimation.duration = pacmanDuration
   49|      0|
   50|      0|        // Stroke end animation
   51|      0|        let strokeEndAnimation = CAKeyframeAnimation(keyPath: "strokeEnd")
   52|      0|
   53|      0|        strokeEndAnimation.keyTimes = [0, 0.5, 1]
   54|      0|        strokeEndAnimation.timingFunctions = [timingFunction, timingFunction]
   55|      0|        strokeEndAnimation.values = [0.875, 1, 0.875]
   56|      0|        strokeEndAnimation.duration = pacmanDuration
   57|      0|
   58|      0|        // Animation
   59|      0|        let animation = CAAnimationGroup()
   60|      0|
   61|      0|        animation.animations = [strokeStartAnimation, strokeEndAnimation]
   62|      0|        animation.duration = pacmanDuration
   63|      0|        animation.repeatCount = HUGE
   64|      0|        animation.isRemovedOnCompletion = false
   65|      0|
   66|      0|        // Draw pacman
   67|      0|        let pacman = NVActivityIndicatorShape.pacman.layerWith(size: CGSize(width: pacmanSize, height: pacmanSize), color: color)
   68|      0|        let frame = CGRect(
   69|      0|            x: (layer.bounds.size.width - size.width) / 2,
   70|      0|            y: (layer.bounds.size.height - pacmanSize) / 2,
   71|      0|            width: pacmanSize,
   72|      0|            height: pacmanSize
   73|      0|        )
   74|      0|
   75|      0|        pacman.frame = frame
   76|      0|        pacman.add(animation, forKey: "animation")
   77|      0|        layer.addSublayer(pacman)
   78|      0|    }
   79|       |
   80|      0|    func circleInLayer(_ layer: CALayer, size: CGSize, color: UIColor) {
   81|      0|        let circleSize = size.width / 5
   82|      0|        let circleDuration: CFTimeInterval = 1
   83|      0|
   84|      0|        // Translate animation
   85|      0|        let translateAnimation = CABasicAnimation(keyPath: "transform.translation.x")
   86|      0|
   87|      0|        translateAnimation.fromValue = 0
   88|      0|        translateAnimation.toValue = -size.width / 2
   89|      0|        translateAnimation.duration = circleDuration
   90|      0|
   91|      0|        // Opacity animation
   92|      0|        let opacityAnimation = CABasicAnimation(keyPath: "opacity")
   93|      0|
   94|      0|        opacityAnimation.fromValue = 1
   95|      0|        opacityAnimation.toValue = 0.7
   96|      0|        opacityAnimation.duration = circleDuration
   97|      0|
   98|      0|        // Animation
   99|      0|        let animation = CAAnimationGroup()
  100|      0|
  101|      0|        animation.animations = [translateAnimation, opacityAnimation]
  102|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
  103|      0|        animation.duration = circleDuration
  104|      0|        animation.repeatCount = HUGE
  105|      0|        animation.isRemovedOnCompletion = false
  106|      0|
  107|      0|        // Draw circles
  108|      0|        let circle = NVActivityIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
  109|      0|        let frame = CGRect(
  110|      0|            x: (layer.bounds.size.width - size.width) / 2 + size.width - circleSize,
  111|      0|            y: (layer.bounds.size.height - circleSize) / 2,
  112|      0|            width: circleSize,
  113|      0|            height: circleSize
  114|      0|        )
  115|      0|
  116|      0|        circle.frame = frame
  117|      0|        circle.add(animation, forKey: "animation")
  118|      0|        layer.addSublayer(circle)
  119|      0|    }
  120|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationSemiCircleSpin.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationSemiCircleSpin.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationSemiCircleSpin: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 0.6
   34|      0|
   35|      0|        // Animation
   36|      0|        let animation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
   37|      0|
   38|      0|        animation.keyTimes = [0, 0.5, 1]
   39|      0|        animation.values = [0, Double.pi, 2 * Double.pi]
   40|      0|        animation.duration = duration
   41|      0|        animation.repeatCount = HUGE
   42|      0|        animation.isRemovedOnCompletion = false
   43|      0|
   44|      0|        // Draw circle
   45|      0|        let circle = NVActivityIndicatorShape.circleSemi.layerWith(size: size, color: color)
   46|      0|        let frame = CGRect(
   47|      0|            x: (layer.bounds.width - size.width) / 2,
   48|      0|            y: (layer.bounds.height - size.height) / 2,
   49|      0|            width: size.width,
   50|      0|            height: size.height
   51|      0|        )
   52|      0|
   53|      0|        circle.frame = frame
   54|      0|        circle.add(animation, forKey: "animation")
   55|      0|        layer.addSublayer(circle)
   56|      0|    }
   57|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationSquareSpin.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationSquareSpin.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationSquareSpin: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let duration: CFTimeInterval = 3
   34|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.09, 0.57, 0.49, 0.9)
   35|      0|
   36|      0|        // Animation
   37|      0|        let animation = CAKeyframeAnimation(keyPath: "transform")
   38|      0|
   39|      0|        animation.keyTimes = [0, 0.25, 0.5, 0.75, 1]
   40|      0|        animation.timingFunctions = [timingFunction, timingFunction, timingFunction, timingFunction]
   41|      0|        animation.values = [
   42|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: 0), createRotateYTransform(angle: 0))),
   43|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: CGFloat(Double.pi)), createRotateYTransform(angle: 0))),
   44|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: CGFloat(Double.pi)), createRotateYTransform(angle: CGFloat(Double.pi)))),
   45|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: 0), createRotateYTransform(angle: CGFloat(Double.pi)))),
   46|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: 0), createRotateYTransform(angle: 0)))
   47|      0|        ]
   48|      0|        animation.duration = duration
   49|      0|        animation.repeatCount = HUGE
   50|      0|        animation.isRemovedOnCompletion = false
   51|      0|
   52|      0|        // Draw square
   53|      0|        let square = NVActivityIndicatorShape.rectangle.layerWith(size: size, color: color)
   54|      0|        let frame = CGRect(x: (layer.bounds.size.width - size.width) / 2,
   55|      0|                           y: (layer.bounds.size.height - size.height) / 2,
   56|      0|                           width: size.width,
   57|      0|                           height: size.height)
   58|      0|
   59|      0|        square.frame = frame
   60|      0|        square.add(animation, forKey: "animation")
   61|      0|        layer.addSublayer(square)
   62|      0|    }
   63|       |
   64|      0|    func createRotateXTransform(angle: CGFloat) -> CATransform3D {
   65|      0|        var transform = CATransform3DMakeRotation(angle, 1, 0, 0)
   66|      0|
   67|      0|        transform.m34 = CGFloat(-1) / 100
   68|      0|
   69|      0|        return transform
   70|      0|    }
   71|       |
   72|      0|    func createRotateYTransform(angle: CGFloat) -> CATransform3D {
   73|      0|        var transform = CATransform3DMakeRotation(angle, 0, 1, 0)
   74|      0|
   75|      0|        transform.m34 = CGFloat(-1) / 100
   76|      0|
   77|      0|        return transform
   78|      0|    }
   79|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Animations/NVActivityIndicatorAnimationTriangleSkewSpin.swift:
    1|       |//
    2|       |//  NVActivityIndicatorAnimationTriangleSkewSpin.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |class NVActivityIndicatorAnimationTriangleSkewSpin: NVActivityIndicatorAnimationDelegate {
   31|       |
   32|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   33|      0|        let x = (layer.bounds.size.width - size.width) / 2
   34|      0|        let y = (layer.bounds.size.height - size.height) / 2
   35|      0|        let duration: CFTimeInterval = 3
   36|      0|        let timingFunction = CAMediaTimingFunction(controlPoints: 0.09, 0.57, 0.49, 0.9)
   37|      0|
   38|      0|        // Animation
   39|      0|        let animation = CAKeyframeAnimation(keyPath: "transform")
   40|      0|
   41|      0|        animation.keyTimes = [0, 0.25, 0.5, 0.75, 1]
   42|      0|        animation.timingFunctions = [timingFunction, timingFunction, timingFunction, timingFunction]
   43|      0|        animation.values = [
   44|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: 0), createRotateYTransform(angle: 0))),
   45|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: CGFloat(Double.pi)), createRotateYTransform(angle: 0))),
   46|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: CGFloat(Double.pi)), createRotateYTransform(angle: CGFloat(Double.pi)))),
   47|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: 0), createRotateYTransform(angle: CGFloat(Double.pi)))),
   48|      0|            NSValue(caTransform3D: CATransform3DConcat(createRotateXTransform(angle: 0), createRotateYTransform(angle: 0)))
   49|      0|        ]
   50|      0|        animation.duration = duration
   51|      0|        animation.repeatCount = HUGE
   52|      0|        animation.isRemovedOnCompletion = false
   53|      0|
   54|      0|        // Draw triangle
   55|      0|        let triangle = NVActivityIndicatorShape.triangle.layerWith(size: size, color: color)
   56|      0|
   57|      0|        triangle.frame = CGRect(x: x, y: y, width: size.width, height: size.height)
   58|      0|        triangle.add(animation, forKey: "animation")
   59|      0|        layer.addSublayer(triangle)
   60|      0|    }
   61|       |
   62|      0|    func createRotateXTransform(angle: CGFloat) -> CATransform3D {
   63|      0|        var transform = CATransform3DMakeRotation(angle, 1, 0, 0)
   64|      0|
   65|      0|        transform.m34 = CGFloat(-1) / 100
   66|      0|
   67|      0|        return transform
   68|      0|    }
   69|       |
   70|      0|    func createRotateYTransform(angle: CGFloat) -> CATransform3D {
   71|      0|        var transform = CATransform3DMakeRotation(angle, 0, 1, 0)
   72|      0|
   73|      0|        transform.m34 = CGFloat(-1) / 100
   74|      0|
   75|      0|        return transform
   76|      0|    }
   77|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/NVActivityIndicatorShape.swift:
    1|       |//
    2|       |//  NVActivityIndicatorShape.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |enum NVActivityIndicatorShape {
   31|       |    case circle
   32|       |    case circleSemi
   33|       |    case ring
   34|       |    case ringTwoHalfVertical
   35|       |    case ringTwoHalfHorizontal
   36|       |    case ringThirdFour
   37|       |    case rectangle
   38|       |    case triangle
   39|       |    case line
   40|       |    case pacman
   41|       |    case stroke
   42|       |
   43|       |    // swiftlint:disable:next cyclomatic_complexity function_body_length
   44|      8|    func layerWith(size: CGSize, color: UIColor) -> CALayer {
   45|      8|        let layer: CAShapeLayer = CAShapeLayer()
   46|      8|        var path: UIBezierPath = UIBezierPath()
   47|      8|        let lineWidth: CGFloat = 2
   48|      8|
   49|      8|        switch self {
   50|      8|        case .circle:
   51|      8|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   52|      8|                        radius: size.width / 2,
   53|      8|                        startAngle: 0,
   54|      8|                        endAngle: CGFloat(2 * Double.pi),
   55|      8|                        clockwise: false)
   56|      8|            layer.fillColor = color.cgColor
   57|      8|        case .circleSemi:
   58|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   59|      0|                        radius: size.width / 2,
   60|      0|                        startAngle: CGFloat(-Double.pi / 6),
   61|      0|                        endAngle: CGFloat(-5 * Double.pi / 6),
   62|      0|                        clockwise: false)
   63|      0|            path.close()
   64|      0|            layer.fillColor = color.cgColor
   65|      8|        case .ring:
   66|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   67|      0|                        radius: size.width / 2,
   68|      0|                        startAngle: 0,
   69|      0|                        endAngle: CGFloat(2 * Double.pi),
   70|      0|                        clockwise: false)
   71|      0|            layer.fillColor = nil
   72|      0|            layer.strokeColor = color.cgColor
   73|      0|            layer.lineWidth = lineWidth
   74|      8|        case .ringTwoHalfVertical:
   75|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   76|      0|                        radius: size.width / 2,
   77|      0|                        startAngle: CGFloat(-3 * Double.pi / 4),
   78|      0|                        endAngle: CGFloat(-Double.pi / 4),
   79|      0|                        clockwise: true)
   80|      0|            path.move(
   81|      0|                to: CGPoint(x: size.width / 2 - size.width / 2 * cos(CGFloat(Double.pi / 4)),
   82|      0|                            y: size.height / 2 + size.height / 2 * sin(CGFloat(Double.pi / 4)))
   83|      0|            )
   84|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   85|      0|                        radius: size.width / 2,
   86|      0|                        startAngle: CGFloat(-5 * Double.pi / 4),
   87|      0|                        endAngle: CGFloat(-7 * Double.pi / 4),
   88|      0|                        clockwise: false)
   89|      0|            layer.fillColor = nil
   90|      0|            layer.strokeColor = color.cgColor
   91|      0|            layer.lineWidth = lineWidth
   92|      8|        case .ringTwoHalfHorizontal:
   93|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   94|      0|                        radius: size.width / 2,
   95|      0|                        startAngle: CGFloat(3 * Double.pi / 4),
   96|      0|                        endAngle: CGFloat(5 * Double.pi / 4),
   97|      0|                        clockwise: true)
   98|      0|            path.move(
   99|      0|                to: CGPoint(x: size.width / 2 + size.width / 2 * cos(CGFloat(Double.pi / 4)),
  100|      0|                            y: size.height / 2 - size.height / 2 * sin(CGFloat(Double.pi / 4)))
  101|      0|            )
  102|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
  103|      0|                        radius: size.width / 2,
  104|      0|                        startAngle: CGFloat(-Double.pi / 4),
  105|      0|                        endAngle: CGFloat(Double.pi / 4),
  106|      0|                        clockwise: true)
  107|      0|            layer.fillColor = nil
  108|      0|            layer.strokeColor = color.cgColor
  109|      0|            layer.lineWidth = lineWidth
  110|      8|        case .ringThirdFour:
  111|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
  112|      0|                        radius: size.width / 2,
  113|      0|                        startAngle: CGFloat(-3 * Double.pi / 4),
  114|      0|                        endAngle: CGFloat(-Double.pi / 4),
  115|      0|                        clockwise: false)
  116|      0|            layer.fillColor = nil
  117|      0|            layer.strokeColor = color.cgColor
  118|      0|            layer.lineWidth = 2
  119|      8|        case .rectangle:
  120|      0|            path.move(to: CGPoint(x: 0, y: 0))
  121|      0|            path.addLine(to: CGPoint(x: size.width, y: 0))
  122|      0|            path.addLine(to: CGPoint(x: size.width, y: size.height))
  123|      0|            path.addLine(to: CGPoint(x: 0, y: size.height))
  124|      0|            layer.fillColor = color.cgColor
  125|      8|        case .triangle:
  126|      0|            let offsetY = size.height / 4
  127|      0|
  128|      0|            path.move(to: CGPoint(x: 0, y: size.height - offsetY))
  129|      0|            path.addLine(to: CGPoint(x: size.width / 2, y: size.height / 2 - offsetY))
  130|      0|            path.addLine(to: CGPoint(x: size.width, y: size.height - offsetY))
  131|      0|            path.close()
  132|      0|            layer.fillColor = color.cgColor
  133|      8|        case .line:
  134|      0|            path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: size.width, height: size.height),
  135|      0|                                cornerRadius: size.width / 2)
  136|      0|            layer.fillColor = color.cgColor
  137|      8|        case .pacman:
  138|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
  139|      0|                        radius: size.width / 4,
  140|      0|                        startAngle: 0,
  141|      0|                        endAngle: CGFloat(2 * Double.pi),
  142|      0|                        clockwise: true)
  143|      0|            layer.fillColor = nil
  144|      0|            layer.strokeColor = color.cgColor
  145|      0|            layer.lineWidth = size.width / 2
  146|      8|        case .stroke:
  147|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
  148|      0|                        radius: size.width / 2,
  149|      0|                        startAngle: -(.pi / 2),
  150|      0|                        endAngle: .pi + .pi / 2,
  151|      0|                        clockwise: true)
  152|      0|            layer.fillColor = nil
  153|      0|            layer.strokeColor = color.cgColor
  154|      0|            layer.lineWidth = 2
  155|      8|        }
  156|      8|
  157|      8|        layer.backgroundColor = nil
  158|      8|        layer.path = path.cgPath
  159|      8|        layer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)
  160|      8|
  161|      8|        return layer
  162|      8|    }
  163|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/NVActivityIndicatorView.swift:
    1|       |//
    2|       |//  NVActivityIndicatorView.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |/**
   31|       | Enum of animation types used for activity indicator view.
   32|       |
   33|       | - Blank:                   Blank animation.
   34|       | - BallPulse:               BallPulse animation.
   35|       | - BallGridPulse:           BallGridPulse animation.
   36|       | - BallClipRotate:          BallClipRotate animation.
   37|       | - SquareSpin:              SquareSpin animation.
   38|       | - BallClipRotatePulse:     BallClipRotatePulse animation.
   39|       | - BallClipRotateMultiple:  BallClipRotateMultiple animation.
   40|       | - BallPulseRise:           BallPulseRise animation.
   41|       | - BallRotate:              BallRotate animation.
   42|       | - CubeTransition:          CubeTransition animation.
   43|       | - BallZigZag:              BallZigZag animation.
   44|       | - BallZigZagDeflect:       BallZigZagDeflect animation.
   45|       | - BallTrianglePath:        BallTrianglePath animation.
   46|       | - BallScale:               BallScale animation.
   47|       | - LineScale:               LineScale animation.
   48|       | - LineScaleParty:          LineScaleParty animation.
   49|       | - BallScaleMultiple:       BallScaleMultiple animation.
   50|       | - BallPulseSync:           BallPulseSync animation.
   51|       | - BallBeat:                BallBeat animation.
   52|       | - LineScalePulseOut:       LineScalePulseOut animation.
   53|       | - LineScalePulseOutRapid:  LineScalePulseOutRapid animation.
   54|       | - BallScaleRipple:         BallScaleRipple animation.
   55|       | - BallScaleRippleMultiple: BallScaleRippleMultiple animation.
   56|       | - BallSpinFadeLoader:      BallSpinFadeLoader animation.
   57|       | - LineSpinFadeLoader:      LineSpinFadeLoader animation.
   58|       | - TriangleSkewSpin:        TriangleSkewSpin animation.
   59|       | - Pacman:                  Pacman animation.
   60|       | - BallGridBeat:            BallGridBeat animation.
   61|       | - SemiCircleSpin:          SemiCircleSpin animation.
   62|       | - BallRotateChase:         BallRotateChase animation.
   63|       | - Orbit:                   Orbit animation.
   64|       | - AudioEqualizer:          AudioEqualizer animation.
   65|       | - CircleStrokeSpin:        CircleStrokeSpin animation.
   66|       | */
   67|       |public enum NVActivityIndicatorType: Int {
   68|       |    /**
   69|       |     Blank.
   70|       |
   71|       |     - returns: Instance of NVActivityIndicatorAnimationBlank.
   72|       |     */
   73|       |    case blank
   74|       |    /**
   75|       |     BallPulse.
   76|       |
   77|       |     - returns: Instance of NVActivityIndicatorAnimationBallPulse.
   78|       |     */
   79|       |    case ballPulse
   80|       |    /**
   81|       |     BallGridPulse.
   82|       |
   83|       |     - returns: Instance of NVActivityIndicatorAnimationBallGridPulse.
   84|       |     */
   85|       |    case ballGridPulse
   86|       |    /**
   87|       |     BallClipRotate.
   88|       |
   89|       |     - returns: Instance of NVActivityIndicatorAnimationBallClipRotate.
   90|       |     */
   91|       |    case ballClipRotate
   92|       |    /**
   93|       |     SquareSpin.
   94|       |
   95|       |     - returns: Instance of NVActivityIndicatorAnimationSquareSpin.
   96|       |     */
   97|       |    case squareSpin
   98|       |    /**
   99|       |     BallClipRotatePulse.
  100|       |
  101|       |     - returns: Instance of NVActivityIndicatorAnimationBallClipRotatePulse.
  102|       |     */
  103|       |    case ballClipRotatePulse
  104|       |    /**
  105|       |     BallClipRotateMultiple.
  106|       |
  107|       |     - returns: Instance of NVActivityIndicatorAnimationBallClipRotateMultiple.
  108|       |     */
  109|       |    case ballClipRotateMultiple
  110|       |    /**
  111|       |     BallPulseRise.
  112|       |
  113|       |     - returns: Instance of NVActivityIndicatorAnimationBallPulseRise.
  114|       |     */
  115|       |    case ballPulseRise
  116|       |    /**
  117|       |     BallRotate.
  118|       |
  119|       |     - returns: Instance of NVActivityIndicatorAnimationBallRotate.
  120|       |     */
  121|       |    case ballRotate
  122|       |    /**
  123|       |     CubeTransition.
  124|       |
  125|       |     - returns: Instance of NVActivityIndicatorAnimationCubeTransition.
  126|       |     */
  127|       |    case cubeTransition
  128|       |    /**
  129|       |     BallZigZag.
  130|       |
  131|       |     - returns: Instance of NVActivityIndicatorAnimationBallZigZag.
  132|       |     */
  133|       |    case ballZigZag
  134|       |    /**
  135|       |     BallZigZagDeflect
  136|       |
  137|       |     - returns: Instance of NVActivityIndicatorAnimationBallZigZagDeflect
  138|       |     */
  139|       |    case ballZigZagDeflect
  140|       |    /**
  141|       |     BallTrianglePath.
  142|       |
  143|       |     - returns: Instance of NVActivityIndicatorAnimationBallTrianglePath.
  144|       |     */
  145|       |    case ballTrianglePath
  146|       |    /**
  147|       |     BallScale.
  148|       |
  149|       |     - returns: Instance of NVActivityIndicatorAnimationBallScale.
  150|       |     */
  151|       |    case ballScale
  152|       |    /**
  153|       |     LineScale.
  154|       |
  155|       |     - returns: Instance of NVActivityIndicatorAnimationLineScale.
  156|       |     */
  157|       |    case lineScale
  158|       |    /**
  159|       |     LineScaleParty.
  160|       |
  161|       |     - returns: Instance of NVActivityIndicatorAnimationLineScaleParty.
  162|       |     */
  163|       |    case lineScaleParty
  164|       |    /**
  165|       |     BallScaleMultiple.
  166|       |
  167|       |     - returns: Instance of NVActivityIndicatorAnimationBallScaleMultiple.
  168|       |     */
  169|       |    case ballScaleMultiple
  170|       |    /**
  171|       |     BallPulseSync.
  172|       |
  173|       |     - returns: Instance of NVActivityIndicatorAnimationBallPulseSync.
  174|       |     */
  175|       |    case ballPulseSync
  176|       |    /**
  177|       |     BallBeat.
  178|       |
  179|       |     - returns: Instance of NVActivityIndicatorAnimationBallBeat.
  180|       |     */
  181|       |    case ballBeat
  182|       |    /**
  183|       |     LineScalePulseOut.
  184|       |
  185|       |     - returns: Instance of NVActivityIndicatorAnimationLineScalePulseOut.
  186|       |     */
  187|       |    case lineScalePulseOut
  188|       |    /**
  189|       |     LineScalePulseOutRapid.
  190|       |
  191|       |     - returns: Instance of NVActivityIndicatorAnimationLineScalePulseOutRapid.
  192|       |     */
  193|       |    case lineScalePulseOutRapid
  194|       |    /**
  195|       |     BallScaleRipple.
  196|       |
  197|       |     - returns: Instance of NVActivityIndicatorAnimationBallScaleRipple.
  198|       |     */
  199|       |    case ballScaleRipple
  200|       |    /**
  201|       |     BallScaleRippleMultiple.
  202|       |
  203|       |     - returns: Instance of NVActivityIndicatorAnimationBallScaleRippleMultiple.
  204|       |     */
  205|       |    case ballScaleRippleMultiple
  206|       |    /**
  207|       |     BallSpinFadeLoader.
  208|       |
  209|       |     - returns: Instance of NVActivityIndicatorAnimationBallSpinFadeLoader.
  210|       |     */
  211|       |    case ballSpinFadeLoader
  212|       |    /**
  213|       |     LineSpinFadeLoader.
  214|       |
  215|       |     - returns: Instance of NVActivityIndicatorAnimationLineSpinFadeLoader.
  216|       |     */
  217|       |    case lineSpinFadeLoader
  218|       |    /**
  219|       |     TriangleSkewSpin.
  220|       |
  221|       |     - returns: Instance of NVActivityIndicatorAnimationTriangleSkewSpin.
  222|       |     */
  223|       |    case triangleSkewSpin
  224|       |    /**
  225|       |     Pacman.
  226|       |
  227|       |     - returns: Instance of NVActivityIndicatorAnimationPacman.
  228|       |     */
  229|       |    case pacman
  230|       |    /**
  231|       |     BallGridBeat.
  232|       |
  233|       |     - returns: Instance of NVActivityIndicatorAnimationBallGridBeat.
  234|       |     */
  235|       |    case ballGridBeat
  236|       |    /**
  237|       |     SemiCircleSpin.
  238|       |
  239|       |     - returns: Instance of NVActivityIndicatorAnimationSemiCircleSpin.
  240|       |     */
  241|       |    case semiCircleSpin
  242|       |    /**
  243|       |     BallRotateChase.
  244|       |
  245|       |     - returns: Instance of NVActivityIndicatorAnimationBallRotateChase.
  246|       |     */
  247|       |    case ballRotateChase
  248|       |    /**
  249|       |     Orbit.
  250|       |
  251|       |     - returns: Instance of NVActivityIndicatorAnimationOrbit.
  252|       |     */
  253|       |    case orbit
  254|       |    /**
  255|       |     AudioEqualizer.
  256|       |
  257|       |     - returns: Instance of NVActivityIndicatorAnimationAudioEqualizer.
  258|       |     */
  259|       |    case audioEqualizer
  260|       |    /**
  261|       |     Stroke.
  262|       |     
  263|       |     - returns: Instance of NVActivityIndicatorAnimationCircleStrokeSpin.
  264|       |     */
  265|       |    case circleStrokeSpin
  266|       |
  267|      0|    static let allTypes = (blank.rawValue ... circleStrokeSpin.rawValue).map { NVActivityIndicatorType(rawValue: $0)! }
  268|       |
  269|       |    // swiftlint:disable:next cyclomatic_complexity function_body_length
  270|      1|    func animation() -> NVActivityIndicatorAnimationDelegate {
  271|      1|        switch self {
  272|      1|        case .blank:
  273|      0|            return NVActivityIndicatorAnimationBlank()
  274|      1|        case .ballPulse:
  275|      0|            return NVActivityIndicatorAnimationBallPulse()
  276|      1|        case .ballGridPulse:
  277|      0|            return NVActivityIndicatorAnimationBallGridPulse()
  278|      1|        case .ballClipRotate:
  279|      0|            return NVActivityIndicatorAnimationBallClipRotate()
  280|      1|        case .squareSpin:
  281|      0|            return NVActivityIndicatorAnimationSquareSpin()
  282|      1|        case .ballClipRotatePulse:
  283|      0|            return NVActivityIndicatorAnimationBallClipRotatePulse()
  284|      1|        case .ballClipRotateMultiple:
  285|      0|            return NVActivityIndicatorAnimationBallClipRotateMultiple()
  286|      1|        case .ballPulseRise:
  287|      0|            return NVActivityIndicatorAnimationBallPulseRise()
  288|      1|        case .ballRotate:
  289|      0|            return NVActivityIndicatorAnimationBallRotate()
  290|      1|        case .cubeTransition:
  291|      0|            return NVActivityIndicatorAnimationCubeTransition()
  292|      1|        case .ballZigZag:
  293|      0|            return NVActivityIndicatorAnimationBallZigZag()
  294|      1|        case .ballZigZagDeflect:
  295|      0|            return NVActivityIndicatorAnimationBallZigZagDeflect()
  296|      1|        case .ballTrianglePath:
  297|      0|            return NVActivityIndicatorAnimationBallTrianglePath()
  298|      1|        case .ballScale:
  299|      0|            return NVActivityIndicatorAnimationBallScale()
  300|      1|        case .lineScale:
  301|      0|            return NVActivityIndicatorAnimationLineScale()
  302|      1|        case .lineScaleParty:
  303|      0|            return NVActivityIndicatorAnimationLineScaleParty()
  304|      1|        case .ballScaleMultiple:
  305|      0|            return NVActivityIndicatorAnimationBallScaleMultiple()
  306|      1|        case .ballPulseSync:
  307|      0|            return NVActivityIndicatorAnimationBallPulseSync()
  308|      1|        case .ballBeat:
  309|      0|            return NVActivityIndicatorAnimationBallBeat()
  310|      1|        case .lineScalePulseOut:
  311|      0|            return NVActivityIndicatorAnimationLineScalePulseOut()
  312|      1|        case .lineScalePulseOutRapid:
  313|      0|            return NVActivityIndicatorAnimationLineScalePulseOutRapid()
  314|      1|        case .ballScaleRipple:
  315|      0|            return NVActivityIndicatorAnimationBallScaleRipple()
  316|      1|        case .ballScaleRippleMultiple:
  317|      0|            return NVActivityIndicatorAnimationBallScaleRippleMultiple()
  318|      1|        case .ballSpinFadeLoader:
  319|      1|            return NVActivityIndicatorAnimationBallSpinFadeLoader()
  320|      1|        case .lineSpinFadeLoader:
  321|      0|            return NVActivityIndicatorAnimationLineSpinFadeLoader()
  322|      1|        case .triangleSkewSpin:
  323|      0|            return NVActivityIndicatorAnimationTriangleSkewSpin()
  324|      1|        case .pacman:
  325|      0|            return NVActivityIndicatorAnimationPacman()
  326|      1|        case .ballGridBeat:
  327|      0|            return NVActivityIndicatorAnimationBallGridBeat()
  328|      1|        case .semiCircleSpin:
  329|      0|            return NVActivityIndicatorAnimationSemiCircleSpin()
  330|      1|        case .ballRotateChase:
  331|      0|            return NVActivityIndicatorAnimationBallRotateChase()
  332|      1|        case .orbit:
  333|      0|            return NVActivityIndicatorAnimationOrbit()
  334|      1|        case .audioEqualizer:
  335|      0|            return NVActivityIndicatorAnimationAudioEqualizer()
  336|      1|        case .circleStrokeSpin:
  337|      0|            return NVActivityIndicatorAnimationCircleStrokeSpin()
  338|      1|        }
  339|      1|    }
  340|       |}
  341|       |
  342|       |// swiftlint:disable file_length
  343|       |/// Activity indicator view with nice animations
  344|       |public final class NVActivityIndicatorView: UIView {
  345|       |    // swiftlint:disable identifier_name
  346|       |    /// Default type. Default value is .BallSpinFadeLoader.
  347|       |    public static var DEFAULT_TYPE: NVActivityIndicatorType = .ballSpinFadeLoader
  348|       |
  349|       |    /// Default color of activity indicator. Default value is UIColor.white.
  350|       |    public static var DEFAULT_COLOR = UIColor.white
  351|       |
  352|       |    /// Default color of text. Default value is UIColor.white.
  353|       |    public static var DEFAULT_TEXT_COLOR = UIColor.white
  354|       |
  355|       |    /// Default padding. Default value is 0.
  356|       |    public static var DEFAULT_PADDING: CGFloat = 0
  357|       |
  358|       |    /// Default size of activity indicator view in UI blocker. Default value is 60x60.
  359|       |    public static var DEFAULT_BLOCKER_SIZE = CGSize(width: 60, height: 60)
  360|       |
  361|       |    /// Default display time threshold to actually display UI blocker. Default value is 0 ms.
  362|       |    ///
  363|       |    /// - note:
  364|       |    /// Default time that has to be elapsed (between calls of `startAnimating()` and `stopAnimating()`) in order to actually display UI blocker. It should be set thinking about what the minimum duration of an activity is to be worth showing it to the user. If the activity ends before this time threshold, then it will not be displayed at all.
  365|       |    public static var DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD = 0
  366|       |
  367|       |    /// Default minimum display time of UI blocker. Default value is 0 ms.
  368|       |    ///
  369|       |    /// - note:
  370|       |    /// Default minimum display time of UI blocker. Its main purpose is to avoid flashes showing and hiding it so fast. For instance, setting it to 200ms will force UI blocker to be shown for at least this time (regardless of calling `stopAnimating()` ealier).
  371|       |    public static var DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME = 0
  372|       |
  373|       |    /// Default message displayed in UI blocker. Default value is nil.
  374|       |    public static var DEFAULT_BLOCKER_MESSAGE: String?
  375|       |
  376|       |    /// Default message spacing to activity indicator view in UI blocker. Default value is 8.
  377|       |    public static var DEFAULT_BLOCKER_MESSAGE_SPACING = CGFloat(8.0)
  378|       |
  379|       |    /// Default font of message displayed in UI blocker. Default value is bold system font, size 20.
  380|       |    public static var DEFAULT_BLOCKER_MESSAGE_FONT = UIFont.boldSystemFont(ofSize: 20)
  381|       |
  382|       |    /// Default background color of UI blocker. Default value is UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
  383|       |    public static var DEFAULT_BLOCKER_BACKGROUND_COLOR = UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
  384|       |    // swiftlint:enable identifier_name
  385|       |
  386|       |    /// Animation type.
  387|       |    public var type: NVActivityIndicatorType = NVActivityIndicatorView.DEFAULT_TYPE
  388|       |
  389|       |    @available(*, unavailable, message: "This property is reserved for Interface Builder. Use 'type' instead.")
  390|       |    @IBInspectable var typeName: String {
  391|       |        get {
  392|       |            return getTypeName()
  393|       |        }
  394|       |        set {
  395|       |            _setTypeName(newValue)
  396|       |        }
  397|       |    }
  398|       |
  399|       |    /// Color of activity indicator view.
  400|       |    @IBInspectable public var color: UIColor = NVActivityIndicatorView.DEFAULT_COLOR
  401|       |
  402|       |    /// Padding of activity indicator view.
  403|       |    @IBInspectable public var padding: CGFloat = NVActivityIndicatorView.DEFAULT_PADDING
  404|       |
  405|       |    /// Current status of animation, read-only.
  406|       |    @available(*, deprecated: 3.1)
  407|      0|    public var animating: Bool { return isAnimating }
  408|       |
  409|       |    /// Current status of animation, read-only.
  410|       |    private(set) public var isAnimating: Bool = false
  411|       |
  412|       |    /**
  413|       |     Returns an object initialized from data in a given unarchiver.
  414|       |     self, initialized using the data in decoder.
  415|       |
  416|       |     - parameter decoder: an unarchiver object.
  417|       |
  418|       |     - returns: self, initialized using the data in decoder.
  419|       |     */
  420|      0|    public required init?(coder aDecoder: NSCoder) {
  421|      0|        super.init(coder: aDecoder)
  422|      0|        backgroundColor = UIColor.clear
  423|      0|        isHidden = true
  424|      0|    }
  425|       |
  426|       |    /**
  427|       |     Create a activity indicator view.
  428|       |
  429|       |     Appropriate NVActivityIndicatorView.DEFAULT_* values are used for omitted params.
  430|       |
  431|       |     - parameter frame:   view's frame.
  432|       |     - parameter type:    animation type.
  433|       |     - parameter color:   color of activity indicator view.
  434|       |     - parameter padding: padding of activity indicator view.
  435|       |
  436|       |     - returns: The activity indicator view.
  437|       |     */
  438|      1|    public init(frame: CGRect, type: NVActivityIndicatorType? = nil, color: UIColor? = nil, padding: CGFloat? = nil) {
  439|      1|        self.type = type ?? NVActivityIndicatorView.DEFAULT_TYPE
  440|      1|        self.color = color ?? NVActivityIndicatorView.DEFAULT_COLOR
  441|      1|        self.padding = padding ?? NVActivityIndicatorView.DEFAULT_PADDING
  442|      1|        super.init(frame: frame)
  443|      1|        isHidden = true
  444|      1|    }
  445|       |
  446|       |    // Fix issue #62
  447|       |    // Intrinsic content size is used in autolayout
  448|       |    // that causes mislayout when using with MBProgressHUD.
  449|       |    /**
  450|       |     Returns the natural size for the receiving view, considering only properties of the view itself.
  451|       |
  452|       |     A size indicating the natural size for the receiving view based on its intrinsic properties.
  453|       |
  454|       |     - returns: A size indicating the natural size for the receiving view based on its intrinsic properties.
  455|       |     */
  456|       |    public override var intrinsicContentSize: CGSize {
  457|       |        return CGSize(width: bounds.width, height: bounds.height)
  458|       |    }
  459|       |
  460|       |    public override var bounds: CGRect {
  461|      0|        didSet {
  462|      0|            // setup the animation again for the new bounds
  463|      0|            if oldValue != bounds && isAnimating {
  464|      0|                setUpAnimation()
  465|      0|            }
  466|      0|        }
  467|       |    }
  468|       |
  469|       |    /**
  470|       |     Start animating.
  471|       |     */
  472|      1|    public final func startAnimating() {
  473|      1|        isHidden = false
  474|      1|        isAnimating = true
  475|      1|        layer.speed = 1
  476|      1|        setUpAnimation()
  477|      1|    }
  478|       |
  479|       |    /**
  480|       |     Stop animating.
  481|       |     */
  482|      0|    public final func stopAnimating() {
  483|      0|        isHidden = true
  484|      0|        isAnimating = false
  485|      0|        layer.sublayers?.removeAll()
  486|      0|    }
  487|       |
  488|       |    // MARK: Internal
  489|       |
  490|       |    // swiftlint:disable:next identifier_name
  491|       |    func _setTypeName(_ typeName: String) {
  492|       |        for item in NVActivityIndicatorType.allTypes {
  493|       |            if String(describing: item).caseInsensitiveCompare(typeName) == ComparisonResult.orderedSame {
  494|       |                type = item
  495|       |                break
  496|       |            }
  497|       |        }
  498|       |    }
  499|       |
  500|       |    func getTypeName() -> String {
  501|       |        return String(describing: type)
  502|       |    }
  503|       |
  504|       |    // MARK: Privates
  505|       |
  506|       |    private final func setUpAnimation() {
  507|       |        let animation: NVActivityIndicatorAnimationDelegate = type.animation()
  508|       |        var animationRect = UIEdgeInsetsInsetRect(frame, UIEdgeInsets(top: padding, left: padding, bottom: padding, right: padding))
  509|       |        let minEdge = min(animationRect.width, animationRect.height)
  510|       |
  511|       |        layer.sublayers = nil
  512|       |        animationRect.size = CGSize(width: minEdge, height: minEdge)
  513|       |        animation.setUpAnimation(in: layer, size: animationRect.size, color: color)
  514|       |    }
  515|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Presenter/NVActivityIndicatorPresenter.swift:
    1|       |//
    2|       |//  NVActivityIndicatorPresenter.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |/// Class packages information used to display UI blocker.
   31|       |public final class ActivityData {
   32|       |    /// Size of activity indicator view.
   33|       |    let size: CGSize
   34|       |
   35|       |    /// Message displayed under activity indicator view.
   36|       |    let message: String?
   37|       |
   38|       |    /// Font of message displayed under activity indicator view.
   39|       |    let messageFont: UIFont
   40|       |
   41|       |    /// Message spacing to activity indicator view.
   42|       |    let messageSpacing: CGFloat
   43|       |
   44|       |    /// Animation type.
   45|       |    let type: NVActivityIndicatorType
   46|       |
   47|       |    /// Color of activity indicator view.
   48|       |    let color: UIColor
   49|       |
   50|       |    /// Color of text.
   51|       |    let textColor: UIColor
   52|       |
   53|       |    /// Padding of activity indicator view.
   54|       |    let padding: CGFloat
   55|       |
   56|       |    /// Display time threshold to actually display UI blocker.
   57|       |    let displayTimeThreshold: Int
   58|       |
   59|       |    /// Minimum display time of UI blocker.
   60|       |    let minimumDisplayTime: Int
   61|       |
   62|       |    /// Background color of the UI blocker
   63|       |    let backgroundColor: UIColor
   64|       |
   65|       |    /**
   66|       |     Create information package used to display UI blocker.
   67|       |
   68|       |     Appropriate NVActivityIndicatorView.DEFAULT_* values are used for omitted params.
   69|       |
   70|       |     - parameter size:                 size of activity indicator view.
   71|       |     - parameter message:              message displayed under activity indicator view.
   72|       |     - parameter messageFont:          font of message displayed under activity indicator view.
   73|       |     - parameter messageSpacing:       message spacing to activity indicator view.
   74|       |     - parameter type:                 animation type.
   75|       |     - parameter color:                color of activity indicator view.
   76|       |     - parameter padding:              padding of activity indicator view.
   77|       |     - parameter displayTimeThreshold: display time threshold to actually display UI blocker.
   78|       |     - parameter minimumDisplayTime:   minimum display time of UI blocker.
   79|       |     - parameter textColor:            color of the text below the activity indicator view. Will match color parameter if not set, otherwise DEFAULT_TEXT_COLOR if color is not set.
   80|       |
   81|       |     - returns: The information package used to display UI blocker.
   82|       |     */
   83|       |    public init(size: CGSize? = nil,
   84|       |                message: String? = nil,
   85|       |                messageFont: UIFont? = nil,
   86|       |                messageSpacing: CGFloat? = nil,
   87|       |                type: NVActivityIndicatorType? = nil,
   88|       |                color: UIColor? = nil,
   89|       |                padding: CGFloat? = nil,
   90|       |                displayTimeThreshold: Int? = nil,
   91|       |                minimumDisplayTime: Int? = nil,
   92|       |                backgroundColor: UIColor? = nil,
   93|      1|                textColor: UIColor? = nil) {
   94|      1|        self.size = size ?? NVActivityIndicatorView.DEFAULT_BLOCKER_SIZE
   95|      1|        self.message = message ?? NVActivityIndicatorView.DEFAULT_BLOCKER_MESSAGE
   96|      1|        self.messageFont = messageFont ?? NVActivityIndicatorView.DEFAULT_BLOCKER_MESSAGE_FONT
   97|      1|        self.messageSpacing = messageSpacing ?? NVActivityIndicatorView.DEFAULT_BLOCKER_MESSAGE_SPACING
   98|      1|        self.type = type ?? NVActivityIndicatorView.DEFAULT_TYPE
   99|      1|        self.color = color ?? NVActivityIndicatorView.DEFAULT_COLOR
  100|      1|        self.padding = padding ?? NVActivityIndicatorView.DEFAULT_PADDING
  101|      1|        self.displayTimeThreshold = displayTimeThreshold ?? NVActivityIndicatorView.DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD
  102|      1|        self.minimumDisplayTime = minimumDisplayTime ?? NVActivityIndicatorView.DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME
  103|      1|        self.backgroundColor = backgroundColor ?? NVActivityIndicatorView.DEFAULT_BLOCKER_BACKGROUND_COLOR
  104|      1|        self.textColor = textColor ?? color ?? NVActivityIndicatorView.DEFAULT_TEXT_COLOR
  105|      1|    }
  106|       |}
  107|       |
  108|       |private protocol NVActivityIndicatorPresenterState {
  109|       |    func startAnimating(presenter: NVActivityIndicatorPresenter)
  110|       |    func stopAnimating(presenter: NVActivityIndicatorPresenter)
  111|       |}
  112|       |
  113|       |private struct NVActivityIndicatorPresenterStateWaitingToStart: NVActivityIndicatorPresenterState {
  114|      1|    func startAnimating(presenter: NVActivityIndicatorPresenter) {
  115|      1|        guard let activityData = presenter.data else { return }
  116|      1|
  117|      1|        presenter.show(with: activityData)
  118|      1|        presenter.state = .animating
  119|      1|        presenter.waitingToStartGroup.leave()
  120|      1|    }
  121|       |
  122|      0|    func stopAnimating(presenter: NVActivityIndicatorPresenter) {
  123|      0|        presenter.state = .stopped
  124|      0|        presenter.waitingToStartGroup.leave()
  125|      0|    }
  126|       |}
  127|       |
  128|       |private struct NVActivityIndicatorPresenterStateAnimating: NVActivityIndicatorPresenterState {
  129|      0|    func startAnimating(presenter: NVActivityIndicatorPresenter) {
  130|      0|        // Do nothing
  131|      0|    }
  132|       |
  133|      0|    func stopAnimating(presenter: NVActivityIndicatorPresenter) {
  134|      0|        guard let activityData = presenter.data else { return }
  135|      0|
  136|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(activityData.minimumDisplayTime)) {
  137|      0|            presenter.stopAnimating()
  138|      0|        }
  139|      0|        presenter.state = .waitingToStop
  140|      0|    }
  141|       |}
  142|       |
  143|       |private struct NVActivityIndicatorPresenterStateWaitingToStop: NVActivityIndicatorPresenterState {
  144|      0|    func startAnimating(presenter: NVActivityIndicatorPresenter) {
  145|      0|        // Do nothing
  146|      0|    }
  147|       |
  148|      0|    func stopAnimating(presenter: NVActivityIndicatorPresenter) {
  149|      0|        presenter.hide()
  150|      0|        presenter.state = .stopped
  151|      0|    }
  152|       |}
  153|       |
  154|       |private struct NVActivityIndicatorPresenterStateStopped: NVActivityIndicatorPresenterState {
  155|      1|    func startAnimating(presenter: NVActivityIndicatorPresenter) {
  156|      1|        guard let activityData = presenter.data else { return }
  157|      1|
  158|      1|        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(activityData.displayTimeThreshold)) {
  159|      1|            guard presenter.state == .waitingToStart else { return }
  160|      1|
  161|      1|            presenter.startAnimating(activityData)
  162|      1|        }
  163|      1|        presenter.state = .waitingToStart
  164|      1|        presenter.waitingToStartGroup.enter()
  165|      1|    }
  166|       |
  167|      0|    func stopAnimating(presenter: NVActivityIndicatorPresenter) {
  168|      0|        // Do nothing
  169|      0|    }
  170|       |}
  171|       |
  172|       |/// Presenter that displays NVActivityIndicatorView as UI blocker.
  173|       |public final class NVActivityIndicatorPresenter {
  174|       |    fileprivate enum State: NVActivityIndicatorPresenterState {
  175|       |        case waitingToStart
  176|       |        case animating
  177|       |        case waitingToStop
  178|       |        case stopped
  179|       |
  180|      2|        var performer: NVActivityIndicatorPresenterState {
  181|      2|            switch self {
  182|      2|            case .waitingToStart: return NVActivityIndicatorPresenterStateWaitingToStart()
  183|      2|            case .animating: return NVActivityIndicatorPresenterStateAnimating()
  184|      2|            case .waitingToStop: return NVActivityIndicatorPresenterStateWaitingToStop()
  185|      2|            case .stopped: return NVActivityIndicatorPresenterStateStopped()
  186|      2|            }
  187|      2|        }
  188|       |
  189|      2|        func startAnimating(presenter: NVActivityIndicatorPresenter) {
  190|      2|            performer.startAnimating(presenter: presenter)
  191|      2|        }
  192|       |
  193|      0|        func stopAnimating(presenter: NVActivityIndicatorPresenter) {
  194|      0|            performer.stopAnimating(presenter: presenter)
  195|      0|        }
  196|       |    }
  197|       |
  198|       |    private let restorationIdentifier = "NVActivityIndicatorViewContainer"
  199|      1|    private let messageLabel: UILabel = {
  200|      1|        let label = UILabel()
  201|      1|
  202|      1|        label.textAlignment = .center
  203|      1|        label.numberOfLines = 0
  204|      1|        label.translatesAutoresizingMaskIntoConstraints = false
  205|      1|
  206|      1|        return label
  207|      1|    }()
  208|       |
  209|       |    fileprivate var state: State = .stopped
  210|       |    fileprivate var data: ActivityData? // Shared activity data across states
  211|       |
  212|       |    /// The group to synchronize the message so that the one set by `setMessage` is always displayed after the initial message passed to `startAnimating(_:)`.
  213|       |    fileprivate let waitingToStartGroup = DispatchGroup()
  214|       |
  215|       |    /// Shared instance of `NVActivityIndicatorPresenter`.
  216|       |    public static let sharedInstance = NVActivityIndicatorPresenter()
  217|       |
  218|       |    /// Current status of animation, read-only.
  219|      0|    public var isAnimating: Bool { return state == .animating || state == .waitingToStop }
  220|       |
  221|      1|    private init() {}
  222|       |
  223|       |    // MARK: - Public interface
  224|       |
  225|       |    /**
  226|       |     Display UI blocker.
  227|       |
  228|       |     - parameter data: Information package used to display UI blocker.
  229|       |     */
  230|       |    public final func startAnimating(_ data: ActivityData) {
  231|       |        self.data = data
  232|       |        state.startAnimating(presenter: self)
  233|       |    }
  234|       |
  235|       |    /**
  236|       |     Remove UI blocker.
  237|       |     */
  238|       |    public final func stopAnimating() {
  239|       |        state.stopAnimating(presenter: self)
  240|       |    }
  241|       |
  242|       |    /// Set message displayed under activity indicator view.
  243|       |    ///
  244|       |    /// - Parameter message: message displayed under activity indicator view.
  245|      0|    public final func setMessage(_ message: String?) {
  246|      0|        waitingToStartGroup.notify(queue: DispatchQueue.main) {
  247|      0|            self.messageLabel.text = message
  248|      0|        }
  249|      0|    }
  250|       |
  251|       |    // MARK: - Helpers
  252|       |
  253|       |    fileprivate func show(with activityData: ActivityData) {
  254|       |        let containerView = UIView(frame: UIScreen.main.bounds)
  255|       |
  256|       |        containerView.backgroundColor = activityData.backgroundColor
  257|       |        containerView.restorationIdentifier = restorationIdentifier
  258|       |        containerView.translatesAutoresizingMaskIntoConstraints = false
  259|       |
  260|       |        let activityIndicatorView = NVActivityIndicatorView(
  261|       |            frame: CGRect(x: 0, y: 0, width: activityData.size.width, height: activityData.size.height),
  262|       |            type: activityData.type,
  263|       |            color: activityData.color,
  264|       |            padding: activityData.padding)
  265|       |
  266|       |        activityIndicatorView.startAnimating()
  267|       |        activityIndicatorView.translatesAutoresizingMaskIntoConstraints = false
  268|       |        containerView.addSubview(activityIndicatorView)
  269|       |
  270|       |        // Add constraints for `activityIndicatorView`.
  271|      1|        ({
  272|      1|            let xConstraint = NSLayoutConstraint(item: containerView, attribute: .centerX, relatedBy: .equal, toItem: activityIndicatorView, attribute: .centerX, multiplier: 1, constant: 0)
  273|      1|            let yConstraint = NSLayoutConstraint(item: containerView, attribute: .centerY, relatedBy: .equal, toItem: activityIndicatorView, attribute: .centerY, multiplier: 1, constant: 0)
  274|      1|
  275|      1|            containerView.addConstraints([xConstraint, yConstraint])
  276|      1|        }())
  277|       |
  278|       |        messageLabel.font = activityData.messageFont
  279|       |        messageLabel.textColor = activityData.textColor
  280|       |        messageLabel.text = activityData.message
  281|       |        containerView.addSubview(messageLabel)
  282|       |
  283|       |        // Add constraints for `messageLabel`.
  284|      1|        ({
  285|      1|            let leadingConstraint = NSLayoutConstraint(item: containerView, attribute: .leading, relatedBy: .equal, toItem: messageLabel, attribute: .leading, multiplier: 1, constant: -8)
  286|      1|            let trailingConstraint = NSLayoutConstraint(item: containerView, attribute: .trailing, relatedBy: .equal, toItem: messageLabel, attribute: .trailing, multiplier: 1, constant: 8)
  287|      1|
  288|      1|            containerView.addConstraints([leadingConstraint, trailingConstraint])
  289|      1|        }())
  290|      1|        ({
  291|      1|            let spacingConstraint = NSLayoutConstraint(item: messageLabel, attribute: .top, relatedBy: .equal, toItem: activityIndicatorView, attribute: .bottom, multiplier: 1, constant: activityData.messageSpacing)
  292|      1|
  293|      1|            containerView.addConstraint(spacingConstraint)
  294|      1|        }())
  295|       |
  296|       |        guard let keyWindow = UIApplication.shared.keyWindow else { return }
  297|       |
  298|       |        keyWindow.addSubview(containerView)
  299|       |
  300|       |        // Add constraints for `containerView`.
  301|      1|        ({
  302|      1|            let leadingConstraint = NSLayoutConstraint(item: keyWindow, attribute: .leading, relatedBy: .equal, toItem: containerView, attribute: .leading, multiplier: 1, constant: 0)
  303|      1|            let trailingConstraint = NSLayoutConstraint(item: keyWindow, attribute: .trailing, relatedBy: .equal, toItem: containerView, attribute: .trailing, multiplier: 1, constant: 0)
  304|      1|            let topConstraint = NSLayoutConstraint(item: keyWindow, attribute: .top, relatedBy: .equal, toItem: containerView, attribute: .top, multiplier: 1, constant: 0)
  305|      1|            let bottomConstraint = NSLayoutConstraint(item: keyWindow, attribute: .bottom, relatedBy: .equal, toItem: containerView, attribute: .bottom, multiplier: 1, constant: 0)
  306|      1|
  307|      1|            keyWindow.addConstraints([leadingConstraint, trailingConstraint, topConstraint, bottomConstraint])
  308|      1|        }())
  309|       |    }
  310|       |
  311|       |    fileprivate func hide() {
  312|       |        guard let keyWindow = UIApplication.shared.keyWindow else { return }
  313|       |
  314|       |        for item in keyWindow.subviews
  315|       |            where item.restorationIdentifier == restorationIdentifier {
  316|       |            item.removeFromSuperview()
  317|       |        }
  318|       |    }
  319|       |}

/Users/raduj/Developer/Appub/Pods/NVActivityIndicatorView/Source/NVActivityIndicatorView/Presenter/NVActivityIndicatorViewable.swift:
    1|       |//
    2|       |//  NVActivityIndicatorViewable.swift
    3|       |//  NVActivityIndicatorView
    4|       |//
    5|       |// The MIT License (MIT)
    6|       |
    7|       |// Copyright (c) 2016 Vinh Nguyen
    8|       |
    9|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
   10|       |// of this software and associated documentation files (the "Software"), to deal
   11|       |// in the Software without restriction, including without limitation the rights
   12|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   13|       |// copies of the Software, and to permit persons to whom the Software is
   14|       |// furnished to do so, subject to the following conditions:
   15|       |
   16|       |// The above copyright notice and this permission notice shall be included in all
   17|       |// copies or substantial portions of the Software.
   18|       |
   19|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   20|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   21|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   22|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   23|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   24|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   25|       |// SOFTWARE.
   26|       |//
   27|       |
   28|       |import UIKit
   29|       |
   30|       |/**
   31|       | *  UIViewController conforms this protocol to be able to display NVActivityIndicatorView as UI blocker.
   32|       | *
   33|       | *  This extends abilities of UIViewController to display and remove UI blocker.
   34|       | */
   35|       |public protocol NVActivityIndicatorViewable {}
   36|       |
   37|       |public extension NVActivityIndicatorViewable where Self: UIViewController {
   38|       |
   39|       |    /// Current status of animation, read-only.
   40|      0|    var isAnimating: Bool { return NVActivityIndicatorPresenter.sharedInstance.isAnimating }
   41|       |
   42|       |    /**
   43|       |     Display UI blocker.
   44|       |
   45|       |     Appropriate NVActivityIndicatorView.DEFAULT_* values are used for omitted params.
   46|       |
   47|       |     - parameter size:                 size of activity indicator view.
   48|       |     - parameter message:              message displayed under activity indicator view.
   49|       |     - parameter messageFont:          font of message displayed under activity indicator view.
   50|       |     - parameter type:                 animation type.
   51|       |     - parameter color:                color of activity indicator view.
   52|       |     - parameter padding:              padding of activity indicator view.
   53|       |     - parameter displayTimeThreshold: display time threshold to actually display UI blocker.
   54|       |     - parameter minimumDisplayTime:   minimum display time of UI blocker.
   55|       |     */
   56|       |    public func startAnimating(
   57|       |        _ size: CGSize? = nil,
   58|       |        message: String? = nil,
   59|       |        messageFont: UIFont? = nil,
   60|       |        type: NVActivityIndicatorType? = nil,
   61|       |        color: UIColor? = nil,
   62|       |        padding: CGFloat? = nil,
   63|       |        displayTimeThreshold: Int? = nil,
   64|       |        minimumDisplayTime: Int? = nil,
   65|       |        backgroundColor: UIColor? = nil,
   66|      0|        textColor: UIColor? = nil) {
   67|      0|        let activityData = ActivityData(size: size,
   68|      0|                                        message: message,
   69|      0|                                        messageFont: messageFont,
   70|      0|                                        type: type,
   71|      0|                                        color: color,
   72|      0|                                        padding: padding,
   73|      0|                                        displayTimeThreshold: displayTimeThreshold,
   74|      0|                                        minimumDisplayTime: minimumDisplayTime,
   75|      0|                                        backgroundColor: backgroundColor,
   76|      0|                                        textColor: textColor)
   77|      0|
   78|      0|        NVActivityIndicatorPresenter.sharedInstance.startAnimating(activityData)
   79|      0|    }
   80|       |
   81|       |    /**
   82|       |     Remove UI blocker.
   83|       |     */
   84|      0|    public func stopAnimating() {
   85|      0|        NVActivityIndicatorPresenter.sharedInstance.stopAnimating()
   86|      0|    }
   87|       |}

